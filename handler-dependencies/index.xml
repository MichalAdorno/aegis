<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Handler-dependencies on DocuAPI Example Site</title>
    <link>https://tmaiaroto.github.io/aegis/handler-dependencies/</link>
    <description>Recent content in Handler-dependencies on DocuAPI Example Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://tmaiaroto.github.io/aegis/handler-dependencies/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://tmaiaroto.github.io/aegis/handler-dependencies/custom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tmaiaroto.github.io/aegis/handler-dependencies/custom/</guid>
      <description>Custom Handler Dependencies You can inject your own dependencies under the Custom field. This is great for 3rd party dependencies you wish to use.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://tmaiaroto.github.io/aegis/handler-dependencies/log/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tmaiaroto.github.io/aegis/handler-dependencies/log/</guid>
      <description>Log logger := logrus.New() // Various configuration options for logrus...  AegisApp = aegis.New(handlers) // Set your configured logger on Log AegisApp.Log = logger AegisApp.Start() Aegis&amp;rsquo; Log dependency provides an adaptable way to log using the popular Go package logrus. You&amp;rsquo;re certainly welcome to use the standard library log package as well. AWS Lambda will send all of that stdout to CloudWatch for you automatically.
However, there may be other logging services you wish to use.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://tmaiaroto.github.io/aegis/handler-dependencies/services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tmaiaroto.github.io/aegis/handler-dependencies/services/</guid>
      <description>Services  From the Cognito example Aegis app
 AegisApp.ConfigureService(&amp;#34;cognito&amp;#34;, func(ctx context.Context, evt map[string]interface{}) interface{} { // Automatically get host. You don&amp;#39;t need to do this - you typically would have a known domain name to use.  host := &amp;#34;&amp;#34; stage := &amp;#34;prod&amp;#34; if headers, ok := evt[&amp;#34;headers&amp;#34;]; ok { headersMap := headers.(map[string]interface{}) if hostValue, ok := headersMap[&amp;#34;Host&amp;#34;]; ok { host = hostValue.(string) } } // Automatically get API stage  if requestContext, ok := evt[&amp;#34;requestContext&amp;#34;]; ok { requestContextMap := requestContext.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://tmaiaroto.github.io/aegis/handler-dependencies/tracer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tmaiaroto.github.io/aegis/handler-dependencies/tracer/</guid>
      <description>Tracer  How to use a different TraceStrategy
 AegisApp = aegis.New(handlers) // For example, disabling tracing AegisApp.Tracer = &amp;amp;aegis.NoTraceStrategy{} AegisApp.Start()  How Aegis Router traces internally
 // Records data in the tracing strategy. In this case, and by default, X-Ray annotations. r.Tracer.Record(&amp;#34;annotation&amp;#34;, map[string]interface{}{ &amp;#34;RequestPath&amp;#34;: req.Path, &amp;#34;Method&amp;#34;: req.HTTPMethod, }, ) err = r.Tracer.Capture(ctx, &amp;#34;RouteHandler&amp;#34;, func(ctx1 context.Context) error { // Makes the Tracer available inside your handler.  // Capture() also applies the annotations from above in the case of XRayTraceStrategy  d.</description>
    </item>
    
  </channel>
</rss>