// Code generated by go-bindata.
// sources:
// bindata.go
// example_aegis
// example_main
// function.go
// DO NOT EDIT!

package function

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1480891815, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _example_aegis = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x91\xcf\xce\xd3\x30\x10\xc4\xef\x79\x8a\xd1\xc7\x95\xaf\xa8\xfc\xb9\xf8\x96\x4a\x20\x21\x21\xc4\x81\x0b\xa7\x6a\xe3\x6c\x5a\x0b\xc7\xb6\xbc\x76\x43\xdf\x9e\x75\xd2\x16\x01\x82\x53\xac\xcc\xec\xec\xfe\x76\x29\x25\xd3\x01\x81\x66\x36\x78\xff\x83\xe6\xe4\x19\x3d\x9f\x9c\xa0\x4f\x49\x95\xef\xcc\xe9\x50\x9d\x1f\x3f\x38\xcf\x62\x50\x72\xe5\x8e\x16\x69\x55\x59\x7d\x31\x18\x54\x79\x66\x92\xf2\xbc\xef\x3c\xcd\xc3\x48\x4d\x1b\x59\x6c\x76\xa9\xac\x86\x3e\x80\x7f\xcb\xa6\x35\x7b\xaa\xc1\x36\xc3\xe7\xb5\x3b\x35\xe5\x78\xf3\xa9\xfa\x02\xbd\xa6\x4c\x54\x7d\xd1\x6a\xb6\xb5\x59\x91\xa3\x86\x2c\xce\x7b\x0c\x0c\x9b\x99\x0a\x8f\x98\x62\xc6\x35\xd6\x97\x18\x6a\x69\x0f\x58\x0a\x20\xbf\xd0\x55\x74\x38\x06\x41\x12\x5b\x37\x39\x8b\x18\x78\xb7\x86\xb7\x20\x6d\x9a\x83\x69\x34\x8e\x66\x63\xf6\xaf\xdf\xbc\x7d\x67\x9a\xf0\x6a\x1b\x66\xc3\x39\xde\xe7\xec\x28\xb9\x7f\x6e\xeb\xcb\xc7\xff\x51\xaf\x6a\x23\x7a\x4a\x39\x8e\x4f\x90\x42\xa7\xbf\x39\xa8\x96\x38\x53\x71\x96\xbc\xbf\xee\xf0\xed\x46\xa2\x5b\x70\x81\xb7\x1a\xc1\x99\xb3\x12\x09\x16\xd6\x62\xfd\x6e\x51\x17\xca\x8e\x06\x3d\xd1\x46\xf7\xf5\xcc\xc2\x7f\x4a\x4a\xcb\x48\x24\xa2\xad\x5c\x40\x39\x33\xf8\xc2\xa1\x60\x66\x91\xe6\x2c\xb1\x6d\x2f\xe3\xd3\xca\xfd\xb8\xcf\x16\xb9\xb5\x37\xeb\x1b\x68\x18\xf7\xf7\x7d\x23\xed\xdf\xe3\xd7\xa3\xeb\x2f\x97\x5e\x3c\x46\x83\x03\xe5\x9f\x01\x00\x00\xff\xff\xbc\x4c\xe7\x68\x77\x02\x00\x00")

func example_aegisBytes() ([]byte, error) {
	return bindataRead(
		_example_aegis,
		"example_aegis",
	)
}

func example_aegis() (*asset, error) {
	bytes, err := example_aegisBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "example_aegis", size: 631, mode: os.FileMode(420), modTime: time.Unix(1479428728, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _example_main = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x53\xdd\x6e\xea\x46\x10\xbe\x8e\x9f\x62\xe4\x2b\x53\x51\x9b\x46\x51\x55\xa5\x3f\x2a\x25\x34\x71\x4b\x4d\x85\x49\xa2\x5c\x0e\x66\x6c\xaf\xba\xde\x75\x77\xd7\x18\x54\xf5\x81\xce\x6b\x9c\x27\x3b\xb3\xc6\xc9\x21\x3a\xd7\x07\x21\x2c\xef\xce\x7c\x7f\x33\x24\x09\x2c\x74\x7b\x32\xa2\xaa\x1d\x7c\xfc\x00\xd7\xb3\xef\xbe\x87\xad\x6e\xe0\x2f\x14\x68\xb4\xd3\xf0\x93\xd3\xcd\xaf\xb6\x16\xa5\xfb\xa1\x30\x84\x4e\x1c\x28\x2e\x74\xf3\x4b\x90\x24\xfc\x85\x95\x28\x48\x59\xda\x43\xa7\xf6\x64\xc0\xd5\x04\xf3\x16\x0b\x7e\x8c\x37\x53\x78\x22\x63\x85\x56\x70\x1d\xcf\x20\xf2\x05\xe1\x78\x15\x4e\x7e\xf4\x10\x27\xdd\x41\x83\x27\x50\xda\x41\x67\x89\x31\x84\x85\x52\x48\x02\x3a\x16\xd4\x3a\x10\x0a\x98\xb1\x95\x02\x55\x41\xd0\x0b\x57\x0f\x3c\x23\x4a\xec\x31\x5e\x46\x0c\xbd\x73\xc8\xe5\xc8\x0d\x2d\xbf\x95\x97\x85\x80\x6e\x14\xed\x3f\xb5\x73\xed\x6d\x92\xf4\x7d\x1f\xe3\x20\x38\xd6\xa6\x4a\xe4\xb9\xd4\x26\xab\x74\xb1\xcc\xf2\xe5\xb7\x2c\x7a\x6c\x7a\x54\x92\xac\x05\x43\xff\x76\xc2\xb0\xe1\xdd\x09\xb0\x65\x51\x05\xee\x58\xaa\xc4\x1e\xb4\x01\xac\x0c\xf1\x1d\xe7\xc6\x2a\x7a\x23\x9c\x50\xd5\x14\xac\x2e\x5d\x8f\x86\x3c\xcc\x5e\x58\x67\xc4\xae\x73\xef\x32\x7b\x95\xc8\xce\x2f\x0b\x38\x35\x54\x10\xce\x73\x48\xf3\x10\x7e\x9b\xe7\x69\x3e\xf5\x20\xcf\xe9\xf6\x61\xfd\xb8\x85\xe7\xf9\x66\x33\xcf\xb6\xe9\x32\x87\xf5\x06\x16\xeb\xec\x2e\xdd\xa6\xeb\x8c\xdf\x7e\x87\x79\xf6\x02\x7f\xa6\xd9\xdd\x14\x88\x13\x63\x1e\x3a\xb6\xc6\x3b\x60\x99\xc2\xa7\x49\xfb\x21\xba\x9c\xe8\x9d\x84\x52\x9f\x25\xd9\x96\x0a\x51\x8a\x82\xad\xa9\xaa\xc3\x8a\xa0\xd2\x07\x32\x8a\x1d\x41\x4b\xa6\x11\xd6\x4f\xd5\xb2\xc0\xbd\x87\x91\xa2\x11\x8e\xd7\xc3\x1f\x7d\xe1\x2b\x0e\x02\xce\xf8\x1f\x0f\xd2\xf0\x7c\x82\x80\x05\x68\xe3\x20\x0a\xae\xc2\x8a\xd5\x75\x3b\xbf\x53\x89\x6b\xc6\xad\x4b\x90\x2a\x61\x13\x89\xcd\x6e\x8f\x61\x30\x09\x82\xb2\x53\xc5\xd0\x1b\x4d\xe0\xbf\xe0\x8a\x09\x1f\x98\x58\x8e\xeb\x80\xf0\xb8\x59\xf9\xd1\x50\x67\x1d\xb4\xc8\x47\x1b\xcd\x09\x9a\xe0\xca\x0c\x4f\xb8\xfd\x19\xce\x68\x71\x46\xfd\xf9\x2e\x2a\x51\xca\x6d\xcd\x05\x55\xcd\x0c\x63\x65\x7c\xc6\x8d\xc2\xfb\xe5\x36\x9c\x42\x98\xf0\x8f\xd1\xda\x5d\x54\xac\x78\x42\xc4\x42\x82\xff\x47\x5d\x17\x40\x51\xe1\x8e\xf0\xcd\x48\xb5\xd0\xca\xd1\xd1\xf1\x04\x0e\xee\xed\x70\x79\x20\xc5\x47\x3c\x8a\xb7\xa3\xbf\x8d\x3e\x9e\x36\x64\x5b\x3d\xfc\x61\x5a\x34\xd8\x70\x8a\x46\xc6\x4f\x28\x3b\xb2\x83\x65\x6e\x88\x73\x72\x39\x87\xdc\xd9\xe8\x66\x76\xf3\x99\xdf\xeb\xfb\x7a\xc4\x63\xed\x4a\x57\x71\xaa\x4a\x1d\x85\x52\x57\x95\xdf\x02\xde\xf2\x85\xd4\xdd\xfe\x19\x5d\x51\xc3\x41\x20\xf0\x8d\xe9\x6c\x38\x19\x06\xc4\x2f\x4c\x20\x94\x93\x2a\x0a\x95\x36\x0d\x4a\xb8\xd7\xf0\xda\x1d\xa1\xb4\x9a\x77\x8a\xe5\xbc\x03\x9a\x84\x43\xd4\xec\xf6\x8f\x7c\x9d\x45\xd7\xb3\xd9\x60\xc3\xbb\xfd\x14\x00\x00\xff\xff\xcd\xac\xe6\x71\xae\x04\x00\x00")

func example_mainBytes() ([]byte, error) {
	return bindataRead(
		_example_main,
		"example_main",
	)
}

func example_main() (*asset, error) {
	bytes, err := example_mainBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "example_main", size: 1198, mode: os.FileMode(420), modTime: time.Unix(1480890572, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _functionGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\xcc\x31\xae\xc2\x30\x10\x45\xd1\xde\xab\x78\x1b\x48\xdc\xff\x2e\xd5\x6f\x28\x90\x28\xa8\x5f\xe2\xc9\x60\x25\x78\x46\xb6\xc3\xfa\x81\x06\x24\xda\x7b\xa5\x13\xa3\xda\x9f\x4a\x91\xca\x2e\x50\x1b\xe6\x5c\x12\x3b\x31\xf8\xa6\x58\x8f\xb2\xf4\x6c\x05\x63\x08\x31\xe2\xcc\x65\xa3\xca\x37\x7b\xb5\x47\x4e\xd2\x40\xcc\x96\x77\xa9\xbe\xbf\x99\x7f\x03\xdd\xd1\x6f\xec\x38\xda\x6b\x4f\xa2\xb9\x61\xb5\x0a\x16\x4c\xd7\x0b\x4e\xbc\xcf\x89\x1f\x68\x0c\xfe\x43\x87\x67\x00\x00\x00\xff\xff\xe4\x5b\xe2\x72\x99\x00\x00\x00")

func functionGoBytes() ([]byte, error) {
	return bindataRead(
		_functionGo,
		"function.go",
	)
}

func functionGo() (*asset, error) {
	bytes, err := functionGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "function.go", size: 153, mode: os.FileMode(420), modTime: time.Unix(1479428516, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"example_aegis": example_aegis,
	"example_main": example_main,
	"function.go": functionGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"example_aegis": &bintree{example_aegis, map[string]*bintree{}},
	"example_main": &bintree{example_main, map[string]*bintree{}},
	"function.go": &bintree{functionGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

