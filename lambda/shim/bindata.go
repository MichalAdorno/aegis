// Code generated by go-bindata.
// sources:
// bindata.go
// index_http_proxy.js
// index_stdio.js
// shim.go
// DO NOT EDIT!

package shim

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(436), modTime: time.Unix(1512596427, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _index_http_proxyJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xdf\x6f\xdb\x36\x10\x7e\xa6\xfe\x8a\x9b\x30\x54\x12\xe2\x49\xd9\xb0\x3d\x4c\x86\x07\xb4\x9d\xb7\x75\x68\xd3\x6e\xf1\x8a\x3d\x0c\x48\x68\xf1\x64\x31\x95\x49\x8d\xa4\xea\x18\xa9\xff\xf7\xe1\x48\xc9\x91\x93\x0c\x1b\xf6\xb4\x3e\x34\x21\xf9\xdd\x7d\xdf\xfd\x54\xa2\x4a\x2b\xeb\xe0\xcd\xf3\xdf\xaf\x7e\x78\xfe\xea\xf5\x25\x2c\xe0\xeb\x79\x14\x7d\xe4\x06\xaa\x46\xb6\xe2\xaa\x33\xba\x42\x6b\x61\x01\x06\xff\xec\xa5\xc1\x34\x39\x79\x48\xb2\x59\xc4\x36\xda\x1f\x61\x01\xaa\x6f\xdb\x59\xc4\x84\x56\x08\x0b\x20\xe7\xba\xc5\xbc\xd5\x9b\x7c\x2d\x95\x48\x87\x0b\xb2\xa9\xb9\x6c\xc9\xed\x79\xc4\x1a\xe7\xba\x29\x01\x9d\x93\x6c\x1e\x45\x69\xdd\xab\xca\x49\xad\x40\xe1\xee\x6a\x60\x49\x33\xb8\x8b\x22\x56\x14\xd0\xc9\x0e\xc1\x3a\x21\x55\xa1\x7b\x37\x83\x75\x2b\x95\x80\x8e\x5b\xeb\x1a\xa3\xfb\x4d\x43\x8f\x68\xcc\x54\xe0\x89\xf8\xdc\x76\x7c\xa7\xd2\x24\x2f\x38\x6e\xa4\xbd\xe2\x5d\xe0\x1d\xf1\xb9\x56\x69\x82\xc6\x68\x93\xcc\x60\xd4\x92\xa2\x31\x24\x81\xb1\xa3\x17\xcf\x92\xef\x8c\x74\x98\xc6\x23\x97\xb7\x43\x51\x42\x7c\xf6\xf3\xe5\xdb\x8b\xdc\x3a\x23\xd5\x46\xd6\x7b\xef\xe0\x2c\xfe\x43\xc5\xd9\x3c\x62\x4c\xd6\x90\x9e\x9d\x85\x74\x7c\x77\x5f\x89\x40\x71\xe4\xc0\x5b\xe9\xd2\x2f\xb3\x39\x14\x05\xd4\xda\x54\x48\xc9\x75\x5c\x2a\x34\x60\xd0\x3a\x6e\x1c\xf0\xda\xa1\x01\xa7\x35\x6c\xb9\xda\x83\x77\x19\x31\x76\x88\x18\x3b\xc9\x1f\xb1\x52\x85\xbc\x90\x79\xc4\x0e\x8f\x63\xbe\x95\x6e\x1a\x72\xa5\x05\xfe\xab\x98\x6f\xa5\x43\x01\x9d\xc1\x2d\x77\xbd\xc1\x76\x0f\x3b\xe9\x1a\x20\x7b\x4a\x04\xfd\xfc\x5f\x44\xae\x70\x07\x4b\x2a\x50\x1a\x2f\x83\xe6\xa3\xce\x41\x66\x36\x66\xe6\x90\x91\x5d\x84\xb7\x9d\x36\xce\xe6\x0d\x57\xa2\x45\x03\x8b\x49\x43\x7c\x44\xe5\x66\x5e\x16\xde\xba\x63\x7b\xf2\x76\xc7\xf7\x16\x74\xef\xba\xde\x81\xd3\x50\xf5\xc6\xa0\x72\x23\x30\xb1\x40\x5a\xa6\xd3\x42\xd7\x39\x1d\x8f\xe3\xe2\x3d\xce\x83\xc3\xb1\x42\xbe\xe5\x87\xd4\x3f\x68\xad\x3b\x0f\x64\xb1\x97\x14\x97\x10\xa4\x0d\x97\x83\xbb\xb8\x1c\xa9\xfc\xfd\xe1\xd8\x8b\x11\xa3\xb9\xa7\x30\x61\x01\xdf\x7e\x73\x7e\x3e\x8f\x98\xac\x43\x78\xb9\x75\x7c\x83\xef\xb9\x91\x7c\xdd\xa2\x85\xcf\x16\x0b\xe8\x95\xc0\x5a\x2a\x14\xf0\xec\x19\x3c\x85\xca\x5b\xbe\x5d\x0b\xfe\x8e\x3c\xfe\x27\x03\x5a\x27\x43\xdf\x05\x55\xff\x60\x44\x25\x0b\xb9\xf2\x3b\x65\xb2\x0a\x42\x6c\xba\xa3\x82\xd1\xda\xb9\x8b\x18\x40\xa3\xad\x53\x7c\x8b\x25\x24\xad\xae\x78\x4b\xe7\x64\x46\x2f\x44\x57\xfa\xff\xc3\x91\xbb\x66\x48\x66\x4e\xbf\xc3\xa7\x4f\x90\x14\x01\xba\x45\xd7\x68\x31\xbe\x12\xef\x1b\x7f\xe3\x31\x3f\x2e\x57\x01\xd5\x20\x17\x68\xec\x11\x16\x8e\x84\xf1\x4a\x00\x92\x97\x54\x13\xe5\xbe\x58\xed\x3b\x4c\x4a\x48\x78\xd7\xb5\xb2\xe2\x24\xb8\xb8\xb1\x5a\x05\x3f\x13\xe0\x6b\x54\x1b\xd7\x24\x25\xbc\xe8\xeb\x1a\x4d\xbe\xde\x3b\x0c\x77\x43\xc9\xd6\x5a\xec\x33\x32\x3a\x44\xec\x30\xf4\xd0\x64\x25\xa7\xf1\xf2\xfd\xf2\x62\x55\xfa\x61\x7c\xf0\xe4\x1d\x64\x4f\xd9\xbc\x7d\xb7\x7a\xf5\xf6\xe2\xf2\x49\xab\x21\xbd\xde\xae\xe2\x6d\xbb\xe6\xd5\x87\xe9\xa0\x18\xb4\x9d\x56\x36\xac\x12\x00\xaa\x88\x41\xfb\x42\x8b\x3d\x2c\x20\x49\xc8\x0c\xa0\x28\xb8\xd2\xae\x41\xfa\x02\xf5\xea\x03\xe8\x1a\x04\x77\x1c\x1a\x6e\x61\x8d\xa8\xc0\x60\x25\xf1\x23\x8a\x19\x58\x0d\xbc\xeb\x50\x09\x90\x7e\xc0\xae\xad\x33\xd7\xe4\x63\x24\xf2\xcb\x8c\xac\x27\xcb\x0c\x52\xef\x37\x1b\x13\x3f\x2a\x38\x5b\x04\xc2\xb9\xcf\x58\x16\xc4\x9c\x38\x7a\xfc\x25\x08\xbd\x59\x14\xd3\x24\x5c\x77\x46\xaf\x5b\xdc\x86\x8d\x42\x1f\x35\xb4\xae\x84\xcf\xef\x30\xdf\xa2\xb5\x7c\x83\x87\xeb\xc9\x0a\xce\x4e\xf8\x8a\xc2\x35\x08\xbb\x46\xb7\x78\xe4\xfe\x9b\xc8\x77\x08\x37\xbd\x75\xd0\x19\xa9\x1c\x25\x40\xf7\x0e\x1a\x34\xf8\x58\xb7\x12\x27\xf1\x0f\xa1\xb3\x93\xba\xfe\xb4\x5a\xbd\x83\x5f\x97\xbf\xfc\xb6\xbc\x5c\xc1\xf2\xe2\xfb\x38\x08\x3b\x01\x0d\xa9\xf2\x3d\xc5\x8a\x82\xea\x77\x03\x0b\xf0\x3b\xa8\xe3\xc6\xe2\x11\x31\x9f\x40\xec\x08\xb9\x5f\x53\x37\x01\x00\x10\x96\x31\xfd\xd1\x00\x77\x11\x0c\xff\x58\x6c\x1d\x77\xbd\x7d\xa9\x05\xc6\x25\xc4\x5f\x9d\x9f\xc7\xb3\xc9\xeb\x30\x3c\x71\x39\xb5\x61\xf1\x74\x80\xc8\xec\xe1\x00\xc5\xf7\xe0\xc3\xc4\x5d\x51\xc4\x34\x28\x71\xf9\x54\x1c\x13\xd6\x29\xe8\x3e\x92\x47\xc0\xc3\x7d\x41\xe9\xfb\x43\xfb\x20\x1f\x9a\x60\x9c\x8f\x19\x8c\xc3\x91\xe5\xa8\x84\xff\xbc\x44\x87\xbf\x02\x00\x00\xff\xff\x90\xbd\x5d\x5e\x8b\x09\x00\x00")

func index_http_proxyJsBytes() ([]byte, error) {
	return bindataRead(
		_index_http_proxyJs,
		"index_http_proxy.js",
	)
}

func index_http_proxyJs() (*asset, error) {
	bytes, err := index_http_proxyJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index_http_proxy.js", size: 2443, mode: os.FileMode(436), modTime: time.Unix(1510187626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _index_stdioJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\xeb\x6e\x1b\x47\xb2\xfe\xcf\xa7\x28\x0f\x70\x4c\x12\xa2\x87\x56\x90\x93\x93\x50\xe1\x09\xe4\x58\x8e\x95\xe3\x1b\x2c\x1d\x64\x01\xc7\x2b\x34\x67\x8a\x9c\x0e\x7b\xba\x27\xdd\x3d\xa4\xb8\x81\x7e\xed\xbe\x4f\xde\x21\xaf\xb2\x2f\xb2\xa8\xea\x9e\x0b\x25\x6a\xed\x64\x13\x60\xb1\xfe\x61\x91\x7d\xa9\x5b\xd7\xe5\xab\xe2\x20\x33\xda\x79\x78\x79\xfa\xa7\xab\x67\xa7\xe7\x2f\x2e\x60\x0e\x9f\x9e\x0c\x06\x95\x35\x19\x3a\x97\xa2\xde\xbc\x1b\xbe\x39\xbd\x7c\x3e\x7c\x0f\x73\x38\xb4\x7a\x04\xc3\xd9\x10\x8e\xf6\xf7\x5e\x9c\xbe\x7c\xf2\xf4\xf4\xea\xf2\xf4\xe2\xff\xae\xde\xbe\x7e\x7d\xd9\x3b\x77\x75\x95\x4b\xab\x45\x89\x27\x83\xe9\x14\x88\xbb\x51\x98\x2a\xb3\x1a\x1d\xa0\x3e\x3e\x19\x0c\x36\xc2\x42\x56\x48\x95\x5f\xc5\x03\x30\x07\x8b\x3f\xd6\xd2\xe2\x68\xb8\xb7\x31\x1c\x4f\x06\x00\x2b\xc3\xdf\x61\x0e\xba\x56\x8a\x56\x72\xa3\x11\xe6\x7d\x5e\xe9\x42\xea\x7c\x14\x17\xf8\xd6\x52\x48\x45\x94\x1f\x9f\x0c\x48\xae\xcb\x02\x61\x69\x94\x32\x5b\xa9\x57\x30\x32\x2a\x1f\x83\xa8\x2a\x6b\x44\x56\x40\x21\x1c\x08\x58\xd4\x2b\xd8\x16\x68\x11\x84\x06\xa9\x3d\x5a\x2d\x14\x38\xb4\x1b\xb4\x80\xd6\x1a\x0b\xd2\x81\x45\x5f\x5b\x8d\x39\xe4\x35\x82\x37\x50\xd6\xca\xcb\x4a\x21\xab\x80\xce\x3b\xe2\xb6\x2d\x64\x56\x80\xb7\x72\xb5\x42\xdb\x1d\x79\x21\xca\x45\x2e\x1c\x78\xbb\x23\x29\xbc\x81\xda\x21\xf8\x02\xc1\x89\x12\xa1\x92\x15\xa6\x74\xbd\xd1\xd8\xf9\x5c\x6a\xd8\x5a\xe9\x31\x08\x30\xa3\xdd\x9f\xe8\x3f\x80\x24\x33\x39\x26\x33\x48\xce\xbe\x7e\xfd\xea\xd5\xdb\xb3\x8b\xb3\xcb\x64\x12\xb7\xd0\x5a\x6d\xee\xd9\x73\x3b\x97\x09\xa5\x68\xd7\xa2\xc8\x13\x5a\xbe\xe9\xd3\x65\x4e\x2f\xd1\x39\xb1\xc2\xe6\x14\x1c\x66\x62\xec\xe5\xae\x0a\x42\xd0\x97\x8e\x87\x17\xd9\xfa\xd2\x8a\x8c\xf6\xde\x85\x45\xe0\x3b\xd7\x95\xb1\xde\xa5\x57\x2c\xe1\xd9\x75\x86\x95\x97\x46\xc3\xa8\xf6\x52\xa5\x3f\xb8\xd9\xe7\xff\xf3\x78\x76\x7c\x3c\x6e\x28\xf1\xa5\x37\x64\x17\xa3\x59\x8e\x91\x46\x4f\xe7\xfe\xfb\xd3\x4f\x67\x9f\x7c\x36\x4e\xc2\xb1\xf7\x41\x09\xfa\xbf\xf0\xbe\x72\xb3\xe9\x74\x25\x7d\x51\x2f\xd2\xcc\x94\xd3\xb2\x10\xd6\x4f\x91\xcc\xbb\x30\xe5\x82\x4e\x2d\x6b\x9d\x31\x63\x5e\x7d\x62\xca\xc5\xc8\x79\x8b\xa2\x9c\x00\x19\x67\x21\xb2\xf5\xb8\x31\x88\x5c\x42\xdc\x84\x79\xf0\xc1\x31\x34\xdf\xdb\x28\x71\x3e\x37\xb5\xef\x2e\x34\x54\xba\x2b\xdd\x4a\x17\x5a\xd7\xd2\x0f\xc2\x9d\x7d\x81\x9e\x49\xe5\xd1\x8e\xd0\xda\x56\x8a\x40\x16\xad\x4d\xe9\xdd\x61\x3e\x9f\xc3\xf0\xec\xcd\xf9\x9b\xb3\xe1\x38\xfa\x64\xcb\x61\x34\x1e\x34\x77\xa6\x53\x38\x5f\x92\x87\x59\x1c\x3a\x28\x8d\x25\x77\x13\x1a\x28\x80\x82\x4b\x17\x42\xe7\x0a\x2d\x8c\x24\x4e\xa0\x76\xe3\x49\xef\xaa\x2f\x50\xb3\x7b\x86\xa3\x5b\xa3\x87\x1e\x16\x08\x8b\x7a\xb1\x50\x98\x43\x5d\x81\xd0\xbb\xad\xd8\xf5\x45\x0c\xa6\x49\x95\x74\x1e\x35\x5a\x37\x1a\xf2\xed\xe1\x38\x55\xa8\x57\xbe\x80\x2f\xe7\x70\xdc\x53\x0b\xa2\x31\x53\x8b\xa5\xd9\xe0\xa9\x52\x2f\xda\xab\xe3\x46\x92\x37\x16\x3d\xea\x1c\xb6\x08\x5b\x8a\x50\x8d\x14\x94\xa4\xd6\x1d\x32\x58\x4a\xdf\xf0\x9c\x00\x9b\x10\x1a\x32\x97\xa4\x10\x1d\x00\xe1\x48\xd8\x8f\x20\x67\x74\x8f\x58\xf7\x36\xe3\x96\x9c\x45\xe1\xbd\xc8\x8a\x09\x7d\xca\x77\xb0\x34\x96\x6d\xa6\xf1\xda\x07\xc3\x3d\x68\x88\xde\x84\x0f\x37\xf1\x79\x3e\xc0\xa1\x0d\xcc\xce\x47\xc7\x9c\x63\xff\x0c\xb9\xcc\xe9\x29\x1c\x62\x49\x59\xa4\x40\x55\xa5\x21\xcd\xbd\x7e\xfa\x7a\x06\x97\x76\x47\xcb\x62\x63\x64\x0e\xbe\x90\xee\x2b\x38\x87\x4c\xd0\x15\x59\x8a\x95\xd4\x08\x99\xa9\x28\x07\x4d\x40\x1b\x0f\xa5\xd9\xf0\x67\x3a\x4a\x59\x11\x0c\xa7\x3c\x4a\x8d\x5e\x96\x48\x69\x6f\x45\x6a\xb2\x6e\x15\xda\xa5\xb1\xa5\xd0\x59\x48\x56\x97\x0d\xa3\x0a\x6d\x29\x9d\x23\x27\x96\xce\xd5\xe8\xd2\x94\x0f\xbc\x45\xa1\xd4\x0e\x0a\xe1\x39\x61\x12\xe7\xc0\x69\x29\x15\xf6\xb8\x8c\x84\xce\xa1\xdc\x34\xca\x6d\x8d\x5d\x8f\x99\x00\x15\x8c\xe5\x5e\x95\x58\xba\x61\x30\x05\x39\xdc\x83\x25\x47\x92\xf3\xee\x62\xa7\xb3\xd1\x70\xea\xcb\x6a\x2a\x70\x25\xdd\x95\xa8\xaa\xe1\xb8\xf5\xb5\xbd\xda\x92\xe2\x35\x66\xe1\x42\x56\x41\x7b\x1c\xf6\x6f\xc3\xc3\x87\x90\x15\xa5\xc9\xe1\xe8\x1a\x6e\x13\x3e\xe9\xb2\xce\x53\x5c\xd4\xab\x0f\xc9\xea\xb1\xa4\x9d\xa5\x4b\xc9\x53\x72\x69\x03\xfb\x74\x1a\x0f\x90\x75\x47\x44\x40\xce\x1f\x9f\x80\xfc\x92\x2f\xc4\xa8\x39\x01\x79\x74\xd4\x8b\x9a\x7e\x9d\x4d\x92\x70\xff\xa3\xd7\x9f\x9d\xbf\x38\x9b\x41\x02\x47\x41\xa6\x77\xf2\x7d\x77\x90\xf8\x3b\x2f\x7c\x94\x94\x3e\xb2\x98\x77\x4f\xee\x91\x7c\x74\xcf\xbf\x7b\x44\x60\x0e\x87\xb7\xc6\x27\x03\xd8\xcf\x27\xc2\xbb\x54\xba\x67\x52\xe1\x68\xbc\x97\x38\xf6\x2f\x0e\x69\x81\x7c\x6a\xd8\x11\xbe\x39\x44\xe9\xa9\xb4\x98\x79\x63\x77\x1f\x26\x97\x37\x47\xf7\x68\xc2\x21\xb9\xf9\xbc\x93\x7f\xc1\x19\x10\x2c\x62\x66\xef\x12\x5a\x48\xee\x31\x1a\xdf\x28\x4d\xbe\x7f\x83\x16\x9a\x1b\x37\x11\xbb\x48\x07\x19\x05\x20\x3a\xaa\x1d\x0b\x45\x7e\xd1\xa0\x9a\xb8\x40\x41\xea\x0b\xe1\x09\xc2\x84\xa4\x1d\xd0\x06\xad\x4b\xbd\x31\x6b\xcc\xe1\xc7\x5a\x66\x6b\x40\x6d\xea\x55\x31\xe1\x33\x94\x59\x20\x33\xb5\xca\x29\xaf\x67\xca\x38\xcc\x41\xa8\x90\xc9\x16\xb5\x07\x01\x1a\xb7\xd0\x03\x25\x29\x83\x92\x94\x41\xc9\x68\x4c\xd4\xa9\xec\x60\x0e\x4b\x6b\x4a\xa6\x59\x08\xad\x72\xb4\x69\x90\xdb\xa2\xab\x95\x27\x19\x78\xb3\xc3\x11\x60\x2c\x70\x01\x0b\x49\x92\xf5\x79\x22\x9c\x24\x72\xbb\x49\x5b\xb3\xb4\xf1\x45\x04\x4b\x01\x08\x79\x13\x29\xfb\x90\x7d\xa9\xf4\x39\x82\x6c\x1d\x99\x0b\x03\xdb\x62\xc7\xa9\xed\x87\xda\x79\x70\x95\xd8\xea\xa8\x4a\x83\x39\xa9\xd4\x52\xea\x69\xac\xa4\x37\x26\x13\x54\x81\x29\x57\xae\xb5\xd9\xb2\xb8\x89\xc5\x47\xb5\xc3\x04\x2a\x61\x3d\x98\x25\x48\xae\xf1\x0b\xcc\x4c\x89\xcc\xb5\x97\x0e\xe9\x71\x33\xb4\x7a\xc2\x96\xa3\xeb\xdf\x98\x96\x1f\xcb\xe0\x60\x29\x9c\x07\x11\x2a\x59\xce\xf5\xd4\x86\xf4\xb8\x15\xda\x37\x4f\xba\xea\xae\x79\x43\x0f\x13\xa4\xc8\x63\xb5\x4d\xe1\x3b\xe4\xf3\xb4\x4b\xd6\x59\x83\x58\x98\xc0\xb2\xa4\xca\x56\x6b\xf9\x63\x8d\x0d\x0d\x74\x29\x5c\x78\xe1\x51\x51\xda\x63\x8f\x1a\xb5\x70\x43\xe3\xf6\x2a\xbe\xec\xa8\x0d\x86\xe9\x34\x38\x06\x3f\xf5\xd4\xd4\x7e\x02\x0b\x25\x75\x0e\x95\x70\xce\x17\xb6\xa6\x1d\xb4\x36\x9c\xee\xf0\xf9\x7e\x82\x65\x8d\xef\xa4\xe3\x09\xfc\xc4\x74\xcd\x0c\xde\x0d\x89\xcb\x70\x02\xcd\xdf\x1e\x98\x42\x6b\xdf\xc3\xcd\xf8\x64\xd0\x48\x74\x6f\xf2\x6e\xb2\x73\x3f\x31\x93\x06\xa1\xde\xe5\x6c\x21\x37\x01\x53\xa1\x15\x41\x65\xe3\x43\xad\xf2\x1e\xf3\x56\xe1\x0f\x68\x91\xfe\x76\x15\x02\x92\x92\x0e\xf8\x09\xc9\x8f\x8d\x5d\x4f\x5a\x0f\xd5\x66\xfb\x15\xfc\xf2\xf3\xf7\x57\xa3\xbf\xff\xf5\x6f\xe3\xab\xe9\x2f\x3f\x0f\xf6\xec\xba\x87\x0f\x9a\x77\xbb\x05\x0d\xf7\xb9\xc6\xe0\x4c\x1a\x95\xf8\x32\xe6\x33\x48\x8e\xbe\xbd\x78\xfd\x2a\x75\xde\x4a\xbd\x92\xcb\x1d\x53\x39\x4a\xbe\xd7\xbd\x2c\x4d\x89\xf2\xe8\x28\x74\x4f\xff\xdb\xb5\x91\x7b\x89\xb2\x8f\x5f\x47\xc7\x41\xc3\xa5\xb1\x21\x02\xbc\x90\x1a\x2d\xc5\xbd\xa7\x98\x11\x4b\x8f\x16\xbc\x31\x50\x0a\xbd\x0b\x6d\xd9\x9d\xec\xbc\xe7\x85\xad\x28\xd4\xe6\xb1\x88\x71\xa5\x73\x87\x3d\xd3\x5c\x4b\xdf\xb7\x0c\xc1\xe3\x8f\x37\xcd\xb5\xf4\x98\x43\x65\xb1\x14\xbe\xb6\x48\x81\x28\x7d\x01\x19\x67\xe5\xe4\x88\xfe\xfe\x9b\x1b\x88\x92\x1a\x77\x5f\xa3\xe4\x2c\x68\xd3\x6a\x10\x15\x18\xdf\x6f\xc0\x90\xcc\xff\x65\x0f\xbb\xdb\xa8\xfe\xe7\xf8\x1a\x01\xa2\x5c\x78\x11\xe7\x0f\x27\x77\x0c\x68\x6a\xcf\x16\xa4\x43\x7b\x8e\x58\xd4\x7a\xdd\xd3\xa5\x9b\x48\x90\x0e\x16\x1d\xfa\x7d\x11\xc9\x1c\x81\x53\xdb\x34\xf6\x0c\xd1\xc8\x80\x5b\x78\x52\x2f\x97\x68\x23\x83\x0e\x97\x00\x2a\x87\xb7\xaf\xc4\xa7\xba\x7d\xb6\xd7\xe5\x65\x05\x66\x6b\x06\x9f\x1a\xb7\x8a\x9a\x03\xe1\x32\x29\x21\x2b\x84\x85\xe3\xc7\xb7\xa5\x6b\xda\xb8\x87\x0f\x99\xfe\xbb\xde\xda\xa3\xe3\xf7\xd4\xef\x1e\x3f\xde\x13\x9c\x0c\x68\x6a\x5f\xd5\x1e\xe6\xc0\x4e\x51\x09\xeb\x30\x10\xf3\xe6\x82\x3d\x64\x34\xfc\xff\xcb\x67\x8f\x3e\x1f\x8e\x3b\x19\xe1\x80\xd9\x3b\xaf\xaf\x95\x9a\x44\xb2\x3d\xb5\x7a\xaf\x47\xf0\x69\x3c\x8a\xcf\xf8\x0a\xb7\x13\x70\xb2\xac\x94\x5c\x4a\xcc\xc1\x15\xb2\x0c\x50\xc1\x4b\xa5\x40\x19\xb3\xe6\x5a\x1b\x0a\x2d\xa3\x09\xea\x28\x08\x78\x70\x39\x68\xdd\x10\xbe\x16\x3e\x2b\xd0\x81\xf4\x9c\xbd\x6d\xad\x35\x9d\x32\x7a\xff\x20\x67\x16\xc0\x0d\x6a\x4f\x40\x27\xa2\x8c\xcc\xa8\x1c\xd8\x57\xdb\xc6\x26\x9e\x7f\x1b\xe9\xcc\x61\x29\x94\x0b\xb3\x34\xda\x8e\x7e\x76\x32\x18\x34\xa3\x93\xa6\x61\x9f\xf7\x42\x95\xd8\x4c\x38\x20\xf0\xda\x93\xf1\xf9\x61\x4f\x57\x42\xea\x49\x08\x48\x17\xb2\x02\xcf\x9a\x4c\xb6\x46\xef\x60\x81\xac\x1e\x63\xbe\x34\xdc\x90\x98\xc6\x51\xce\x2c\x60\xac\x70\x96\x07\x64\x0b\xa4\xde\x59\xe7\x98\xc3\x62\xc7\x84\x0c\x61\x34\x46\x46\xbb\x04\x84\x87\x0b\x3e\x1c\x1c\xee\x94\x42\xf1\xd9\xf9\x2b\x78\x27\x5c\x48\x0c\xef\xdb\xd9\xcd\x27\x9f\x7d\x3e\x3b\xfe\x64\x1c\x59\x52\x07\x77\xcb\x08\x0f\x1f\xc2\x83\xa8\x78\xab\x4c\x07\x9d\xa5\x5e\x9a\x51\x72\x41\x75\xb9\x7b\x9f\x0e\x69\xa5\x94\x60\xe2\x95\x3f\x16\x9a\x44\x26\x77\x5e\xd0\xdb\x1a\xe3\x6e\x1b\x93\x07\x75\x78\x4b\xde\x46\x77\x6e\x39\xdb\x21\x65\x6e\x06\xe1\xef\xb7\xb7\x01\xed\xbe\xdb\x79\x13\x27\x3a\x01\xdd\x76\xb0\x36\x85\xe7\xa6\xc2\x65\x4d\x58\x33\x42\x53\xea\x6f\x73\x83\x8e\x70\x92\x17\x6b\x04\x01\xdb\x82\x7a\x72\x6f\x1a\x27\x0d\x13\x24\x3f\x74\xb0\x32\x11\x85\xf3\x24\x40\xed\x20\xc7\x0a\x75\x4e\x8e\x4f\xe4\x44\x55\x05\xd8\x7b\x1e\x61\xad\x43\x84\x8d\x50\x35\x12\xf2\x17\x50\xd4\xab\x96\x27\x4f\x5b\x93\x52\x66\xd6\x38\xb4\x1b\x99\x61\x42\x31\x92\x64\xca\xd4\x79\xeb\xd5\x69\x12\xb8\x5f\x18\x38\x1f\x96\x1d\x7f\xe1\x5c\x5d\x22\x7c\xf1\x45\xfa\xc5\x7f\x11\x22\x17\x4a\x45\xc2\xae\x1f\x8d\xa7\xdf\x5d\x34\x51\x27\x2c\x82\x2b\xe9\x9c\xd4\xa0\xb9\xce\x33\x04\xb7\xb5\x66\x3c\x1e\xd4\x0c\xdc\xc2\x00\xe5\x85\x31\x6b\x90\x9a\xe1\x35\x76\xc1\xdb\xd5\x9b\x98\x25\xf2\xf0\xf1\x4e\x9a\xe0\xd9\xc7\xb9\x87\xc4\x15\xd4\x5b\x25\x0c\xf9\xd2\x34\x7d\x52\x7b\x92\x81\x20\xbf\xf4\xbb\xd0\xe3\x04\xbe\x24\xa3\x00\x65\xb8\xc9\x70\xd2\xd7\xfc\x68\x2e\x0e\xa4\xb9\x05\x72\xb0\x42\xdf\xf6\x68\x3a\x0f\x0d\x10\x5d\xec\xe6\xc9\x0b\xe4\x60\xf3\xd4\x02\x1a\x10\x94\x00\xe2\x30\xba\xd7\x87\x09\xad\x0d\x5f\x08\x99\x81\xd4\xef\xa5\x9a\x3f\x00\x01\x47\xd7\x15\x39\xc3\xdf\x90\x14\xc9\xb0\xa1\x2f\x8d\xd3\x1f\x93\xe7\x2a\x20\xe2\x8a\x6a\xa3\x66\x4b\xc5\x94\x46\xee\xc1\xd7\x62\xd2\x38\x87\xad\x74\x05\xe5\xe0\xad\x70\xa1\xf3\xe4\xb6\xf7\xf4\xcd\x39\x7c\x23\x3c\x6e\xc5\x0e\x2c\x66\x28\x37\xc8\x66\x6a\x86\xf3\x69\x9a\x12\x03\x47\x1e\x20\xbb\xb9\xa8\x00\xba\xe0\x0d\xf7\x37\xa1\x8b\xa6\x00\x6d\x0c\x53\xd8\x4b\x92\xb0\x9b\xdb\x16\x96\x44\xe6\x49\x45\x10\xab\x49\xca\x17\x14\x35\xcf\x9b\xe3\xe1\x5e\x8c\x5f\x7a\x30\x4d\x8d\xa2\x82\x6f\xc5\x46\x5c\x64\x56\x56\x1e\x4a\xa9\x94\x74\x98\x19\x9d\xbb\x83\xc4\x88\xc2\x4b\x17\xeb\xfe\x53\x41\x3d\x77\xba\x42\x5e\x1e\x75\x86\x55\x5b\xb1\x73\x4d\x91\xf5\x06\xb2\xda\x5a\xb2\x60\x34\xdf\xd0\x71\xd1\xdc\xfb\xe5\x84\xd6\x53\xfa\xda\xfe\x74\xc2\xb5\x83\x49\x1e\x6a\xf5\x6f\xa1\x39\xca\x68\x00\x09\x0b\x9c\xcc\x82\xe0\x93\xb0\x16\x49\x25\xb3\x86\xcd\x80\x0a\x72\x03\xfd\x82\xc4\xcf\x43\x8e\xe2\x02\xcf\x6f\xcd\x93\x71\xea\x61\x63\x6d\x61\xa7\xc3\xfc\x56\xf5\x1d\x1c\x80\x63\xbf\x0e\x8b\xfd\x73\x20\x76\x2f\x0a\xfb\x10\x04\xdb\xc3\x5f\xf7\x82\xaf\x38\x3d\xfa\x38\xd8\xf5\x5b\x30\xd7\x6f\x04\x5c\x07\xd0\xd6\xfd\x50\x2b\xe2\x2c\xe8\x05\x76\xf8\x89\xe1\xf0\x9b\x85\x1f\xd7\xe2\x74\x66\x02\xca\xac\x62\xde\xe4\x9f\x2c\x28\xd6\xd2\xc1\xc7\xf5\xba\xbf\x57\xa3\x7b\x0b\xee\xdf\x52\x84\x50\xdb\xb5\xf4\x6e\x02\xa5\xb0\xeb\x30\x24\xdb\x2f\xf0\x94\x71\x08\xa3\x81\x33\x74\x3a\x13\xba\x6d\x40\x78\xa0\x72\xed\xef\x0e\x95\x62\x25\x3d\x55\xce\xf0\xbc\x2c\x08\x30\x0e\xa0\xac\xb1\x4e\x93\xd4\x03\x76\xa4\xce\xed\x8e\x69\xee\xe9\x75\x7f\xdf\x46\x17\x0e\x81\x9a\x08\x4b\x1b\xaf\xe4\xf6\xf2\xc1\x7c\x0e\x3d\xbf\xfb\x15\xed\xe8\x81\x78\xd9\x33\x7f\x73\x4d\xc0\x63\x9e\x8b\xd6\x2e\x50\x08\xbf\x48\x61\x56\xe8\x30\x27\x6c\xc7\x83\x5b\x86\x99\x46\xaf\xd2\x1e\x39\x17\xc8\x55\x98\x79\xcc\xbf\x82\xcb\x42\x50\x2a\x14\x3a\x00\x57\xae\x08\xd2\xc4\x71\x9d\xf4\x61\xd8\x08\x49\x20\x93\xc0\xdb\xe0\xa2\xf4\x3a\x65\xe5\xa9\xa0\xb8\xca\x68\x87\x3d\x0e\xa7\x55\xa5\x64\x78\x61\xf2\xec\x15\x49\x12\x4a\x7e\xfc\x4d\xe6\x4e\x18\xfd\x74\x33\x6e\xd3\x00\xf9\xdd\xcd\x3f\x02\x00\x00\xff\xff\x69\x6b\x72\xa2\xb0\x1f\x00\x00")

func index_stdioJsBytes() ([]byte, error) {
	return bindataRead(
		_index_stdioJs,
		"index_stdio.js",
	)
}

func index_stdioJs() (*asset, error) {
	bytes, err := index_stdioJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index_stdio.js", size: 8112, mode: os.FileMode(436), modTime: time.Unix(1512596414, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _shimGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcc\xb1\x11\xc2\x30\x0c\x85\xe1\xde\x53\xbc\x05\x12\xf7\xcc\x40\xc1\x0a\xcf\x58\x08\x5f\x88\xe4\x93\x1d\xee\xd8\x9e\x22\x4d\xca\xff\x2f\xbe\x9c\xd5\x6f\x2a\x26\xc1\x29\x50\x5f\x4a\xb3\xca\x49\x2c\x7d\x53\x8c\x77\xdb\xb1\xa6\x94\x33\x1e\x7c\x6e\x54\x39\x57\x0f\xff\xb6\x2a\x03\x3c\xfb\xe5\x81\x38\xcc\x9a\x29\x18\xa5\xcd\x60\xfc\xf0\xa1\xe9\x41\x95\x01\x37\xdc\xb9\x97\xca\x35\xf5\x8b\x93\xfe\x01\x00\x00\xff\xff\xb4\x05\x8d\x5f\x7e\x00\x00\x00")

func shimGoBytes() ([]byte, error) {
	return bindataRead(
		_shimGo,
		"shim.go",
	)
}

func shimGo() (*asset, error) {
	bytes, err := shimGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shim.go", size: 126, mode: os.FileMode(436), modTime: time.Unix(1510187626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go":          bindataGo,
	"index_http_proxy.js": index_http_proxyJs,
	"index_stdio.js":      index_stdioJs,
	"shim.go":             shimGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go":          &bintree{bindataGo, map[string]*bintree{}},
	"index_http_proxy.js": &bintree{index_http_proxyJs, map[string]*bintree{}},
	"index_stdio.js":      &bintree{index_stdioJs, map[string]*bintree{}},
	"shim.go":             &bintree{shimGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
