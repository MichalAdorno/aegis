// Code generated by go-bindata.
// sources:
// bindata.go
// index_http_proxy.js
// index_stdio.js
// shim.go
// DO NOT EDIT!

package shim

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1479592427, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _index_http_proxyJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x5f\x6f\xe3\x44\x10\x7f\xb6\x3f\xc5\x60\xa1\xb3\xad\x06\xbb\x20\x78\x20\x51\x90\xee\x8e\x00\x87\xee\xda\x42\xc3\x89\x07\xa4\x76\x63\xaf\xe3\xed\x39\xbb\x66\x77\x7d\x69\xd4\xcb\x77\x67\x66\xd7\x4e\x9c\xb6\x08\xc4\x13\x95\xda\x66\x67\x7f\x33\xf3\x9b\xbf\x9b\xb0\x50\xd2\x58\x78\xf7\xf2\xf7\x9b\x1f\x5e\xbe\x79\x7b\x0d\x73\xf8\x7a\x16\x86\x1f\x99\x86\xa2\x16\x4d\x79\xd3\x6a\x55\x70\x63\x50\xae\xf9\x9f\x9d\xd0\x3c\x89\x4f\x2e\xe2\x74\x12\x06\x6b\xe5\x8e\x08\x92\x5d\xd3\xa0\xa0\x54\x92\xe3\x89\x8c\xab\x86\x67\x8d\x5a\x67\x2b\x21\xcb\xa4\x17\x90\x4e\xc5\x44\x43\x66\xcf\xc3\xa0\xb6\xb6\x1d\x3b\xa0\x73\x9c\x22\x8d\xa4\xea\x64\x61\x85\x92\x20\xf9\xf6\xa6\xf7\x92\xa4\xf0\x10\x86\x41\x9e\x43\x2b\x5a\x0e\xc6\x96\x42\xe6\xaa\xb3\x13\x58\x35\xe8\x03\x5a\x66\x8c\xad\xb5\xea\xd6\x35\x5d\x72\xad\xc7\x04\x4f\xc8\x67\xa6\x65\x5b\x99\xc4\x59\xce\xf8\x5a\x98\x1b\xd6\x7a\xbf\x03\x3e\x53\x78\x89\x06\x94\x8e\x27\x30\x70\x49\x50\x40\x14\x82\xe0\x60\xc5\x79\xc9\xb6\x5a\x58\x9e\x44\x83\x2f\xa7\xc7\xcb\x29\x44\x67\x3f\x5f\x5f\x5e\x20\x4a\x0b\xb9\x16\xd5\xce\x19\x38\x8b\xfe\x90\x11\xfa\x0a\x02\x51\x41\x72\x76\xe6\xd3\xf1\xdd\xb1\x12\xde\xc5\xc1\x07\xbf\x17\x36\xf9\x32\x9d\x01\xc6\x5d\x29\x5d\x70\x4a\xae\x65\x42\x72\x8d\x89\x33\x96\x69\x0b\xac\xb2\x78\xb2\x4a\xc1\x86\xc9\x1d\x38\x93\x68\x63\x8f\xbf\x27\xf9\x23\xaf\x54\x21\x47\x04\x0f\xfb\xa7\x31\xa3\xb7\x71\xc8\x85\x2a\xf9\xbf\x8a\x19\xf5\x38\x96\x40\xf3\x0d\xb3\x9d\xe6\xcd\x0e\xb6\xc2\xd6\x40\xfa\x94\x08\xfa\xff\xbf\x88\x1c\xa5\xb0\xa0\x02\x25\xd1\xc2\x73\x3e\xf0\xec\x69\xa6\x43\x66\xf6\x29\xe9\x85\xfc\xbe\x55\xda\x9a\xac\x66\xb2\x6c\xd0\xd9\x7c\xd4\x10\x1f\xb9\xc4\xf6\x23\x5a\xfc\xde\x1e\xda\x93\x35\x5b\xb6\x33\x80\xad\xd9\x76\x16\xc9\x41\xd1\x69\x8d\xc8\x01\x18\x1b\x20\x2e\xe3\x69\x21\x71\x46\xc7\xc3\xb8\x38\x8b\x33\x6f\x70\xa8\x90\x6b\xf9\x3e\xf5\x8f\x5a\xeb\xc1\x01\x83\xc8\x51\x8a\xa6\xe0\xa9\xf5\xc2\xde\x1c\x8a\xfb\x4f\x4e\xbe\x3f\xf4\x62\x18\xd0\xdc\x53\x98\xc8\xe6\xdb\x6f\xce\xcf\x31\x03\xa2\xf2\xe1\xa1\x0f\xb6\xe6\xef\x99\x16\x6c\xd5\x70\x03\x9f\xcd\xe7\xd0\xc9\x92\x57\x58\x87\x12\x5e\xbc\x80\xe7\x50\x59\xc3\x36\xab\x92\x5d\x91\xc5\xff\xa4\x40\xeb\xa4\xef\x3b\xcf\xea\x1f\x94\xa8\x64\x3e\x57\x6e\xa7\x8c\x56\x81\x8f\x4d\xb5\x54\x30\x5a\x3b\x68\x13\xa0\x56\xc6\x4a\xb6\xc1\xd6\x8c\x1b\x55\xb0\x86\xce\xf1\x84\x6e\xc8\xdd\xd4\xfd\xf5\x47\x66\xeb\x3e\x99\x19\x7d\x86\x4f\x9f\x20\xce\x3d\x74\xc3\x6d\xad\xca\xe1\x96\xfc\xbe\x73\x12\x87\xf9\x71\xb1\xf4\xa8\x9a\x33\x1c\x18\x73\x80\xf9\x23\x61\x1c\x13\x80\xf8\x35\xd5\x44\xda\x2f\x96\xbb\x96\xc7\xc8\x08\x97\x51\x23\x0a\x46\x84\xf3\x3b\xa3\xa4\xb7\x33\x02\xbe\xe5\x72\x6d\x6b\x84\xbe\xea\xaa\x8a\xeb\x6c\xb5\xb3\xdc\xcb\xfa\x92\xad\x54\xb9\x4b\x49\x09\xe7\x60\xdf\xf7\xd0\x68\x25\x63\xeb\xbf\x5f\x5c\x2c\xa7\x6e\x18\x1f\x5d\x39\x03\xe9\x73\x3a\x97\x57\xcb\x37\x97\x17\xd7\xcf\x6a\xf5\xe9\x75\x7a\x98\xce\x66\xc5\x8a\x0f\xe3\x41\xc1\x71\x6d\xf1\xde\xaf\x12\x00\xaa\x08\x8a\x5e\x21\x4d\x44\xc5\x31\xa9\x01\x8e\x39\x93\xca\xd6\x9c\x5e\xa0\x4e\x7e\x00\x55\x41\xc9\x2c\x83\x9a\x19\x58\x71\x2e\x51\xa5\x10\xc8\xaf\x9c\x80\x51\x80\x59\xe2\xb8\xf4\x85\x1b\xb0\x5b\x1c\x84\x5b\xb2\x31\x38\x72\xcb\x8c\xb4\x47\xcb\x0c\x12\x67\x37\x1d\x12\x3f\x30\x38\x9b\x7b\x87\x33\x97\xb1\xd4\x93\x39\x31\xf4\xf4\x25\xf0\xbd\x99\xe7\xe3\x24\xdc\xe2\x8c\x62\x5b\x6e\xfc\x46\xa1\x47\x0d\x97\xd4\x14\x3e\x7f\xe0\xd9\x06\xf7\x19\x76\xee\xfe\x76\xb4\x82\xd3\x13\x7f\x79\x8e\x91\xc3\xb6\x46\x63\x07\xdf\x7f\x13\xf9\x96\xc3\x5d\x87\x6f\x77\x8b\xb3\x6f\x29\x01\xb8\x68\xb0\xcd\x34\x7f\xca\x5b\x96\x27\xf1\xf7\xa1\x07\x27\x75\xfd\x69\xb9\xbc\x82\x5f\x17\xbf\xfc\xb6\xb8\x5e\xc2\xe2\xe2\xfb\xc8\x13\x3b\x01\xf5\xa9\x72\x3d\x85\x51\x53\xfd\xee\xb0\x72\x6e\x07\xb5\x4c\x1b\x7e\x40\xcc\x46\x10\x33\x40\x8e\x6b\xea\xce\x03\x00\xfc\x32\xa6\x2f\x0d\xc8\x09\xfa\x9f\x20\xc2\x01\xb7\x9d\x79\x8d\x6b\x18\x97\x55\xf4\xd5\xf9\x79\x34\x19\xdd\xf6\xc3\x83\x57\x23\x9d\x20\x1a\x0f\x10\xa9\x3d\x1e\xa0\xe8\x08\xde\x8f\xcc\xe5\x79\x44\x83\x82\x1a\xcf\xc4\x31\xf2\x3a\x06\x1d\x23\x79\x02\xdc\x1f\x0b\x4a\xef\x0f\xed\x83\xac\x6f\x82\x61\x3e\xf0\xa9\xe8\x87\x23\xcd\xb0\x36\xee\x79\x09\xf7\x7f\x05\x00\x00\xff\xff\x90\xbd\x5d\x5e\x8b\x09\x00\x00")

func index_http_proxyJsBytes() ([]byte, error) {
	return bindataRead(
		_index_http_proxyJs,
		"index_http_proxy.js",
	)
}

func index_http_proxyJs() (*asset, error) {
	bytes, err := index_http_proxyJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index_http_proxy.js", size: 2443, mode: os.FileMode(420), modTime: time.Unix(1479336513, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _index_stdioJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x56\xc1\x6e\xe3\x36\x10\xbd\xfb\x2b\x06\x3a\xac\x64\x38\x91\x13\xa0\x87\xc2\x6e\x5a\x6c\x91\x04\x48\xb1\x6d\x80\x26\x05\x0a\xa4\x41\xc0\x48\x23\x8b\x88\x4c\xaa\x24\x65\xc7\x5d\xf8\xdf\x3b\x43\x52\xb1\xe5\x75\xd1\x00\xbd\x74\x73\x88\xcc\xd1\xf0\xbd\xc7\x99\x47\x52\xa3\x42\x2b\xeb\xe0\xe7\x8f\xbf\x3f\x5d\x7f\xbc\xf9\x74\x07\x17\xf0\xcd\x7c\x34\x5a\x09\x03\x45\x2d\x9b\xf2\xa9\x35\xba\x40\x6b\x29\x6e\xf0\xcf\x4e\x1a\xcc\xd2\xc1\x8b\x74\x7c\x32\x02\x58\x68\x3f\xa6\x2c\xd5\x35\x0d\x47\x4a\xad\x90\x86\x0c\xaf\x1b\xcc\x1b\xbd\xc8\x9f\xa5\x2a\xb3\x18\xf0\xb3\x2a\x21\x1b\x46\x3e\x23\xc6\xe9\x14\x2e\xf1\xb9\x5b\x78\xea\x6a\xc0\x57\x11\xc9\x7c\x24\x1d\x2e\x39\x5c\xd9\xdc\xa0\x28\x4b\x69\xee\x36\xaa\xc8\xd2\x7c\xca\x6f\x2b\x6d\x20\xe3\xa9\xf2\xe2\x6c\x0e\xf2\x3b\x9f\x9d\x37\xa8\x16\xae\xa6\xf1\x64\x32\x86\xcf\xc4\x08\xfb\x82\xb2\x24\xa1\x99\xef\x0b\x5e\xdf\x7c\xba\x9a\x41\x02\x13\xf0\xc8\x0f\xf2\x31\x66\x31\xa7\x75\xc2\x45\x69\xfc\xd3\xeb\x3a\x48\x1b\x80\x9d\xfe\xc3\xdf\x31\x66\x8f\x7d\x24\xce\x21\x1f\x94\x15\x84\xa4\x5c\xda\x6b\xd9\x60\x36\xee\x97\x7a\x38\x25\xe5\x40\x45\x29\x69\xc4\xdb\x7e\x01\x70\x49\x05\x2f\x9c\x36\x9b\x7f\x41\x29\xfb\xbc\x3d\xa8\x2f\x24\xfa\x4c\x2b\xff\xc2\x19\xa4\x54\x38\xcf\xf1\x90\x70\x20\x39\x56\x16\x9f\xbe\xd4\xe5\x30\x9d\x03\x3e\x7d\x3b\x1a\x65\x55\xa7\x0a\x27\xb5\x02\x85\xeb\xa7\xe8\xb9\x2c\x08\x25\xff\xdc\xdf\x5e\xde\xce\xe0\xde\x6c\xc0\x69\x10\x2b\x2d\x4b\x70\xb5\xb4\x3f\xc0\x0d\x14\x42\xa5\x0e\xe4\x52\x2c\xa4\x22\xd2\x76\x23\xd5\xe2\x04\x94\x76\x44\xb8\xf2\xbf\x39\x13\x44\xdb\x82\x5e\xa1\x01\x14\x45\x0d\x4e\x2e\x11\x28\xba\x20\xbf\x39\x60\x87\xb5\x68\xe8\xb1\x14\xaa\xc0\x3c\x72\xf6\x4c\xf4\x6a\x29\xad\x65\x71\xf4\xe8\xd0\xe6\x79\x4c\xf9\x15\x45\xd3\x6c\xa0\x16\x0e\x59\x18\xb3\x07\x36\x6e\xc5\x1e\x53\x26\x54\x09\xcb\x15\xd5\xb6\x64\xb1\x6b\x6d\x5e\xc6\x0c\x31\xd8\x6e\x39\xbe\x62\x11\x8c\x5f\xb4\x20\x70\x21\xed\x13\xab\x9e\xba\x65\x3b\xdd\x0d\x3f\x7c\xa0\x69\x54\x3a\x98\xbc\x1e\xbc\xe2\x86\x05\x5d\xad\x6c\x91\xaa\x5c\x4a\x35\xd5\x9d\x3b\x81\xe7\x86\xf6\x27\xb4\xc2\x5a\x57\x9b\x8e\xdf\xa0\x31\x83\xbd\x3d\x54\x62\x5b\xb1\x56\x59\x7a\x00\x7f\x02\x9f\x3d\xa8\x9e\xc1\x43\xca\x14\x14\xe9\x9f\x6f\x33\x3d\xf4\x23\x6c\x83\x96\x48\x90\x6b\x42\xa3\xb8\x36\x94\xda\x77\x3a\xa3\x40\xef\xc4\xe1\xf4\x7c\x6d\x68\x8f\x65\x49\x2f\xcf\xcf\xc4\x92\x36\xe9\xe4\xa7\xbb\xdb\x5f\x28\xcb\x50\x63\x65\xb5\xf1\x10\x93\xe4\x0f\xd5\x6f\x2f\x36\xfc\x64\x12\x0e\x9f\xef\x77\x47\xdf\xce\xf0\xbb\x5a\x4b\x97\x9d\x8f\xe7\x5c\x2d\xea\x7b\x81\xec\x57\x27\xa4\x22\x87\x18\x24\x83\x1a\x07\xa2\x72\x34\x72\x5a\x03\xd9\x62\x13\x8e\xb4\xbd\xcd\x35\x30\x6a\xa0\xe7\x93\xd1\x6b\xe2\xe1\xb1\x12\x10\xeb\x7e\x05\x0a\xda\x01\xef\x2c\x01\xcd\x44\x6a\xa1\xc1\xa5\x70\x9d\x41\x72\xdd\x5a\xba\x1a\x0a\xbf\xa9\x92\x09\x3f\xff\x6f\x85\xa0\x38\x5c\x71\xeb\xb2\xe4\x2a\xc8\x7f\x93\x1c\x15\x8f\x8f\x15\xca\xfb\xf6\x3f\x3a\xc6\x63\x80\x0f\x06\xf7\x7c\x9d\xde\xe1\x1b\xa8\x14\x4e\xc4\xcb\x77\x3e\xac\x12\x6d\x6d\x5f\x26\xce\x18\xb8\xaa\xee\xd4\x4b\x2f\x7b\x77\x11\xb3\x5c\x92\x87\x6e\x4f\x0d\xaf\x39\x10\x5c\x04\x8a\xdd\x6a\x7b\x5e\x6a\xe2\x8f\x5d\x55\xa1\x89\xb8\xf1\x52\x00\x6c\x2c\x0e\x92\x63\x0f\x06\x59\xfe\x3f\xf1\x16\x35\x16\x2f\xfe\x9c\x25\x3c\x3a\x8c\x10\x84\x2d\xa4\xa4\x38\xad\xf0\xfc\x6c\xa0\x25\x5e\xed\x7c\xd0\xf1\xf0\x61\x2f\x76\x7a\xfe\x48\x4a\x69\xc2\x4e\x26\x97\x88\x0a\xd1\x76\x8e\xc4\xfa\x0e\xb7\xc2\x58\x0c\x48\x4e\xdf\xf9\x76\x67\xe9\x6f\xf7\xd7\xa7\xdf\xa6\xe3\xa8\x0b\x0e\xab\xba\xf3\x2c\x7f\xe3\x44\xc0\x7e\x11\x7d\x43\xb6\x63\xee\xd5\x08\x5f\x5b\x6d\xe8\x4a\xad\xe9\x50\x6f\xa8\xc9\x17\x7b\xfe\x5c\xa1\xa2\xe3\x96\xed\x80\xaf\x8e\x45\x86\xf3\x58\x34\x6b\xb1\xb1\xbd\x4e\xbe\x29\x3a\x63\x28\xb5\xcf\x4c\xad\x67\x1f\x7c\x5b\x71\x3c\xe7\xe1\xdb\xc7\x95\xc7\x3c\xb2\x55\x42\xdd\x0f\xdc\x1d\xea\x93\x78\x45\xc9\x0c\x82\xb2\x10\x8b\x50\x14\x8d\xbf\xfc\xfa\xfa\xad\x30\xda\xfe\x1d\x00\x00\xff\xff\xd8\x2d\xf6\x1e\x39\x0a\x00\x00")

func index_stdioJsBytes() ([]byte, error) {
	return bindataRead(
		_index_stdioJs,
		"index_stdio.js",
	)
}

func index_stdioJs() (*asset, error) {
	bytes, err := index_stdioJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index_stdio.js", size: 2617, mode: os.FileMode(420), modTime: time.Unix(1479592417, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _shimGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x8c\xc1\x0d\xc2\x30\x10\x04\xff\xae\x62\x1b\x48\xfc\xa7\x06\x1e\xb4\xb0\xc6\xe6\x38\x85\xdc\x59\x67\x07\x89\xee\x41\xca\x87\xe7\x8c\x34\x93\xb3\xf8\x45\x9a\xb5\xe0\x6c\x10\x5f\x8a\x5a\xe5\x24\x96\xbe\x09\xc6\x53\x77\xac\x29\xe5\x8c\x1b\xef\x1b\xa5\x9d\xaa\x87\xbf\xb5\xb6\x01\x9e\xfc\xf0\x40\x1c\x66\x6a\x02\x46\xd1\x19\x8c\x0f\x5e\x34\x39\x7e\xcd\x80\x1b\xae\xdc\x4b\xe5\x9a\xfa\xdf\x27\x7d\x03\x00\x00\xff\xff\xb4\x05\x8d\x5f\x7e\x00\x00\x00")

func shimGoBytes() ([]byte, error) {
	return bindataRead(
		_shimGo,
		"shim.go",
	)
}

func shimGo() (*asset, error) {
	bytes, err := shimGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shim.go", size: 126, mode: os.FileMode(420), modTime: time.Unix(1478287898, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"index_http_proxy.js": index_http_proxyJs,
	"index_stdio.js": index_stdioJs,
	"shim.go": shimGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"index_http_proxy.js": &bintree{index_http_proxyJs, map[string]*bintree{}},
	"index_stdio.js": &bintree{index_stdioJs, map[string]*bintree{}},
	"shim.go": &bintree{shimGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

