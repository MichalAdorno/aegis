// Code generated by go-bindata.
// sources:
// bindata.go
// index_http_proxy.js
// index_stdio.js
// shim.go
// DO NOT EDIT!

package shim

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1507327750, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _index_http_proxyJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x5f\x6f\xe3\x44\x10\x7f\xb6\x3f\xc5\x60\xa1\xb3\xad\x06\xbb\x20\x78\x20\x51\x90\xee\x8e\x00\x87\xee\xda\x42\xc3\x89\x07\xa4\x76\x63\xaf\xe3\xed\x39\xbb\x66\x77\x7d\x69\xd4\xcb\x77\x67\x66\xd7\x4e\x9c\xb6\x08\xc4\x13\x95\xda\x66\x67\x7f\x33\xf3\x9b\xbf\x9b\xb0\x50\xd2\x58\x78\xf7\xf2\xf7\x9b\x1f\x5e\xbe\x79\x7b\x0d\x73\xf8\x7a\x16\x86\x1f\x99\x86\xa2\x16\x4d\x79\xd3\x6a\x55\x70\x63\x50\xae\xf9\x9f\x9d\xd0\x3c\x89\x4f\x2e\xe2\x74\x12\x06\x6b\xe5\x8e\x08\x92\x5d\xd3\xa0\xa0\x54\x92\xe3\x89\x8c\xab\x86\x67\x8d\x5a\x67\x2b\x21\xcb\xa4\x17\x90\x4e\xc5\x44\x43\x66\xcf\xc3\xa0\xb6\xb6\x1d\x3b\xa0\x73\x9c\x22\x8d\xa4\xea\x64\x61\x85\x92\x20\xf9\xf6\xa6\xf7\x92\xa4\xf0\x10\x86\x41\x9e\x43\x2b\x5a\x0e\xc6\x96\x42\xe6\xaa\xb3\x13\x58\x35\xe8\x03\x5a\x66\x8c\xad\xb5\xea\xd6\x35\x5d\x72\xad\xc7\x04\x4f\xc8\x67\xa6\x65\x5b\x99\xc4\x59\xce\xf8\x5a\x98\x1b\xd6\x7a\xbf\x03\x3e\x53\x78\x89\x06\x94\x8e\x27\x30\x70\x49\x50\x40\x14\x82\xe0\x60\xc5\x79\xc9\xb6\x5a\x58\x9e\x44\x83\x2f\xa7\xc7\xcb\x29\x44\x67\x3f\x5f\x5f\x5e\x20\x4a\x0b\xb9\x16\xd5\xce\x19\x38\x8b\xfe\x90\x11\xfa\x0a\x02\x51\x41\x72\x76\xe6\xd3\xf1\xdd\xb1\x12\xde\xc5\xc1\x07\xbf\x17\x36\xf9\x32\x9d\x01\xc6\x5d\x29\x5d\x70\x4a\xae\x65\x42\x72\x8d\x89\x33\x96\x69\x0b\xac\xb2\x78\xb2\x4a\xc1\x86\xc9\x1d\x38\x93\x68\x63\x8f\xbf\x27\xf9\x23\xaf\x54\x21\x47\x04\x0f\xfb\xa7\x31\xa3\xb7\x71\xc8\x85\x2a\xf9\xbf\x8a\x19\xf5\x38\x96\x40\xf3\x0d\xb3\x9d\xe6\xcd\x0e\xb6\xc2\xd6\x40\xfa\x94\x08\xfa\xff\xbf\x88\x1c\xa5\xb0\xa0\x02\x25\xd1\xc2\x73\x3e\xf0\xec\x69\xa6\x43\x66\xf6\x29\xe9\x85\xfc\xbe\x55\xda\x9a\xac\x66\xb2\x6c\xd0\xd9\x7c\xd4\x10\x1f\xb9\xc4\xf6\x23\x5a\xfc\xde\x1e\xda\x93\x35\x5b\xb6\x33\x80\xad\xd9\x76\x16\xc9\x41\xd1\x69\x8d\xc8\x01\x18\x1b\x20\x2e\xe3\x69\x21\x71\x46\xc7\xc3\xb8\x38\x8b\x33\x6f\x70\xa8\x90\x6b\xf9\x3e\xf5\x8f\x5a\xeb\xc1\x01\x83\xc8\x51\x8a\xa6\xe0\xa9\xf5\xc2\xde\x1c\x8a\xfb\x4f\x4e\xbe\x3f\xf4\x62\x18\xd0\xdc\x53\x98\xc8\xe6\xdb\x6f\xce\xcf\x31\x03\xa2\xf2\xe1\xa1\x0f\xb6\xe6\xef\x99\x16\x6c\xd5\x70\x03\x9f\xcd\xe7\xd0\xc9\x92\x57\x58\x87\x12\x5e\xbc\x80\xe7\x50\x59\xc3\x36\xab\x92\x5d\x91\xc5\xff\xa4\x40\xeb\xa4\xef\x3b\xcf\xea\x1f\x94\xa8\x64\x3e\x57\x6e\xa7\x8c\x56\x81\x8f\x4d\xb5\x54\x30\x5a\x3b\x68\x13\xa0\x56\xc6\x4a\xb6\xc1\xd6\x8c\x1b\x55\xb0\x86\xce\xf1\x84\x6e\xc8\xdd\xd4\xfd\xf5\x47\x66\xeb\x3e\x99\x19\x7d\x86\x4f\x9f\x20\xce\x3d\x74\xc3\x6d\xad\xca\xe1\x96\xfc\xbe\x73\x12\x87\xf9\x71\xb1\xf4\xa8\x9a\x33\x1c\x18\x73\x80\xf9\x23\x61\x1c\x13\x80\xf8\x35\xd5\x44\xda\x2f\x96\xbb\x96\xc7\xc8\x08\x97\x51\x23\x0a\x46\x84\xf3\x3b\xa3\xa4\xb7\x33\x02\xbe\xe5\x72\x6d\x6b\x84\xbe\xea\xaa\x8a\xeb\x6c\xb5\xb3\xdc\xcb\xfa\x92\xad\x54\xb9\x4b\x49\x09\xe7\x60\xdf\xf7\xd0\x68\x25\x63\xeb\xbf\x5f\x5c\x2c\xa7\x6e\x18\x1f\x5d\x39\x03\xe9\x73\x3a\x97\x57\xcb\x37\x97\x17\xd7\xcf\x6a\xf5\xe9\x75\x7a\x98\xce\x66\xc5\x8a\x0f\xe3\x41\xc1\x71\x6d\xf1\xde\xaf\x12\x00\xaa\x08\x8a\x5e\x21\x4d\x44\xc5\x31\xa9\x01\x8e\x39\x93\xca\xd6\x9c\x5e\xa0\x4e\x7e\x00\x55\x41\xc9\x2c\x83\x9a\x19\x58\x71\x2e\x51\xa5\x10\xc8\xaf\x9c\x80\x51\x80\x59\xe2\xb8\xf4\x85\x1b\xb0\x5b\x1c\x84\x5b\xb2\x31\x38\x72\xcb\x8c\xb4\x47\xcb\x0c\x12\x67\x37\x1d\x12\x3f\x30\x38\x9b\x7b\x87\x33\x97\xb1\xd4\x93\x39\x31\xf4\xf4\x25\xf0\xbd\x99\xe7\xe3\x24\xdc\xe2\x8c\x62\x5b\x6e\xfc\x46\xa1\x47\x0d\x97\xd4\x14\x3e\x7f\xe0\xd9\x06\xf7\x19\x76\xee\xfe\x76\xb4\x82\xd3\x13\x7f\x79\x8e\x91\xc3\xb6\x46\x63\x07\xdf\x7f\x13\xf9\x96\xc3\x5d\x87\x6f\x77\x8b\xb3\x6f\x29\x01\xb8\x68\xb0\xcd\x34\x7f\xca\x5b\x96\x27\xf1\xf7\xa1\x07\x27\x75\xfd\x69\xb9\xbc\x82\x5f\x17\xbf\xfc\xb6\xb8\x5e\xc2\xe2\xe2\xfb\xc8\x13\x3b\x01\xf5\xa9\x72\x3d\x85\x51\x53\xfd\xee\xb0\x72\x6e\x07\xb5\x4c\x1b\x7e\x40\xcc\x46\x10\x33\x40\x8e\x6b\xea\xce\x03\x00\xfc\x32\xa6\x2f\x0d\xc8\x09\xfa\x9f\x20\xc2\x01\xb7\x9d\x79\x8d\x6b\x18\x97\x55\xf4\xd5\xf9\x79\x34\x19\xdd\xf6\xc3\x83\x57\x23\x9d\x20\x1a\x0f\x10\xa9\x3d\x1e\xa0\xe8\x08\xde\x8f\xcc\xe5\x79\x44\x83\x82\x1a\xcf\xc4\x31\xf2\x3a\x06\x1d\x23\x79\x02\xdc\x1f\x0b\x4a\xef\x0f\xed\x83\xac\x6f\x82\x61\x3e\xf0\xa9\xe8\x87\x23\xcd\xb0\x36\xee\x79\x09\xf7\x7f\x05\x00\x00\xff\xff\x90\xbd\x5d\x5e\x8b\x09\x00\x00")

func index_http_proxyJsBytes() ([]byte, error) {
	return bindataRead(
		_index_http_proxyJs,
		"index_http_proxy.js",
	)
}

func index_http_proxyJs() (*asset, error) {
	bytes, err := index_http_proxyJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index_http_proxy.js", size: 2443, mode: os.FileMode(420), modTime: time.Unix(1479336513, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _index_stdioJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x59\xeb\x6e\x1b\xc7\x15\xfe\xcf\xa7\x18\x13\x68\x48\x42\xf4\xca\x0a\xd2\x34\x91\xa2\x06\x74\x2c\xc7\x4a\x7d\x83\xc9\x22\x05\x1c\x57\x58\xee\x0e\xc9\x89\x76\x67\xb6\x3b\xb3\xa2\xd9\x40\xbf\xda\xf7\xc9\x3b\xe4\x55\xfa\x22\xfd\xce\x99\xd9\x9b\x44\xd5\x8a\x8b\x00\x45\x0d\x43\xe4\xce\x9e\x39\xb7\x39\x97\xef\x0c\x07\x89\xd1\xd6\x89\x17\xb3\xbf\x5c\x3c\x9d\x9d\x3f\x9f\x8b\x53\xf1\xd9\xc9\x60\x50\x94\x26\x91\xd6\x46\x52\x5f\xbd\x1d\xbd\x9e\x2d\x9e\x8d\xde\xe1\xcd\xbe\xd5\x03\x31\x3a\x1e\xe1\x6f\xef\xdd\xf3\xd9\x8b\xc7\x4f\x66\x17\x8b\xd9\xfc\x4f\x17\x6f\x5e\xbd\x5a\x74\xe8\x2e\x2e\x52\x55\xea\x38\x97\x27\x83\xc3\x43\x41\xd2\x4d\x26\xa3\xcc\xac\xc7\x7b\xb8\x4f\xa0\xca\x55\x5c\x8a\x64\xa3\xb2\xf4\x22\x10\x40\x91\x52\xfe\xad\x52\xa5\x1c\x8f\x7a\x2f\x46\x93\xe9\x40\x88\xb5\xe1\x67\x50\xe9\x2a\xcb\x68\x25\x35\x5a\xe2\xb1\x23\x2b\x5a\x2a\x9d\x8e\xc3\x02\xef\x5a\xc5\x2a\x23\xce\x8f\x20\x11\x7a\x2d\x36\x52\xac\x4c\x96\x99\xad\xd2\x6b\x31\x36\x59\x3a\x11\x71\x01\xbe\x71\xb2\x11\x9b\xd8\x8a\x58\x2c\xab\xb5\xd8\x6e\x64\x29\x45\xac\x85\xd2\x4e\xc2\xaa\x4c\x58\x59\x5e\xc9\x52\xc8\xb2\x34\xa5\x50\x16\x9a\xba\xaa\xd4\x32\x15\x69\x25\x85\x33\x22\xaf\x32\xa7\x8a\x4c\xb2\x09\xd2\x3a\x4b\xd2\xb6\x1b\x05\xb6\xae\x54\xeb\x35\xf6\x36\x24\xcf\xe3\x7c\x99\x42\x96\x2b\x77\xa4\x05\x76\x57\x16\x4c\xa0\x9a\x85\xff\x44\xa1\x0a\x19\xd1\xf6\xda\x62\xeb\x52\xa5\xc5\xb6\x54\x4e\x7a\x05\x8e\xe9\xed\x4f\xf4\x47\x88\x61\x62\x52\x39\x3c\x16\xc3\xb3\x6f\x5e\xbd\x7c\xf9\xe6\x6c\x7e\xb6\x18\x4e\xc3\x2b\x10\x6b\x73\xc7\x3b\xbb\xb3\x49\x9c\x65\xf4\xb6\x94\x71\x3a\xa4\xe5\xeb\x2e\x5f\x96\xf4\x02\xee\x8f\xd7\xb2\xa6\x12\xfb\x85\x98\x72\xb1\x2b\xbc\x12\xf4\xd0\xca\x70\x71\x72\xb9\x28\xe3\x84\xde\xbd\xf5\x8b\x82\xf7\xbc\x2f\x4c\xe9\x6c\x74\xc1\x1a\x9e\xbd\x4f\x64\xe1\x94\xd1\x62\x5c\x39\x95\x45\x3f\xda\xe3\x2f\xfe\xf0\xe8\xf8\xe8\x68\x52\x73\xe2\x4d\xaf\xc9\x2f\x46\xb3\x1e\x63\x2d\x1d\xd1\xfd\xfe\xb3\xcf\x8e\x3f\xfd\x7c\x32\xf4\x64\xef\xbc\x11\xf4\x77\xe3\x5c\x61\x8f\x0f\x0f\xd7\xca\x6d\xaa\x65\x94\x98\xfc\x30\xdf\xc4\xa5\x3b\x94\xe4\xde\xa5\xc9\x97\x44\xb5\xaa\x74\xc2\x82\x79\xf5\x31\x56\xc7\xd6\x41\x40\x3e\x15\xe4\x9c\x25\xd4\x9f\xd4\x0e\x51\x2b\x11\x5e\x8a\x53\x1f\x83\x13\x51\x3f\x37\x59\x82\xa3\x32\x95\x6b\x37\xd4\x5c\xda\x2d\xed\x4a\x9b\x5a\xef\x95\x1b\xf8\x3d\x7d\x85\x9e\xaa\x0c\xe1\x37\x86\x93\x1a\x2d\x3c\x5b\xac\x44\x74\xee\x60\x7b\x2a\x46\x67\xaf\xcf\x5f\x9f\x8d\x26\x21\x26\x1b\x09\xe3\xc9\xa0\xde\x83\x8f\xf3\x15\x45\x58\x29\x47\x56\xe4\xa6\xa4\x70\x43\x78\x53\x02\xf9\x90\xc6\x53\x9a\x21\x48\xc7\x4a\x4e\x11\x8e\x93\x69\x67\x2b\xf6\x69\x0e\x4f\x4f\xba\x35\x7a\xe4\xc4\x52\x22\x53\x96\xcb\x0c\x29\x50\x15\x48\x95\xdd\x36\xde\x75\x55\xf4\xae\x89\x32\x65\x9d\xd4\xb2\xb4\xe3\x11\xef\x1e\x4d\xa2\x4c\xea\xb5\xdb\x88\xaf\x4e\xc5\x51\xc7\x2c\x11\x9c\x19\x95\x32\x37\x57\x72\x96\x65\xcf\x9b\xad\x93\x5a\x93\xd7\x30\x51\xea\x54\x6c\x25\xfe\xc3\x08\x2d\x29\x29\xc9\xac\x5b\x6c\x64\xae\x5c\x2d\x73\x2a\xd8\x85\xa2\x66\xb3\x20\x83\x88\x40\x20\x0b\xa1\xec\x3d\xd8\x19\xdd\x61\xd6\x9e\xcd\xa4\x61\x07\x2a\x87\x70\xdf\x4c\xe9\x5b\xba\x43\x95\x29\xd9\x67\x5a\xbe\x77\xde\x71\x0f\x6a\xa6\xd7\xfe\xcb\x75\x38\x9e\x0f\x48\x68\x12\xb3\x8d\xd1\x09\xd7\xd8\xbf\x8a\x54\xa5\x74\x14\x56\xca\x9c\xaa\xc8\x46\x66\x45\xe4\xcb\xdc\xab\x27\xaf\x8e\xc5\xa2\xdc\xd1\x72\x7c\x65\x54\x0a\x5d\x94\xfd\x5a\x9c\x23\x3a\x68\x8b\xca\xe3\xb5\xc2\xe1\x27\xa6\xa0\x1a\x34\x15\xda\x38\xc4\xc5\x15\x7f\x27\x52\xaa\x8a\xc2\x70\xc9\xa3\xd2\xe8\x14\x0a\x13\x56\xd7\x64\x26\xdb\x56\xc8\x12\x1f\x79\xac\x13\x5f\xac\x16\xb5\x20\xbc\xc8\x95\xb5\x14\xc4\xf8\x40\x2d\x8c\x22\x26\x78\x23\x11\x97\x3b\x04\x9a\xe3\x82\x49\x92\xbd\xa4\x95\x42\x4d\x6c\xa5\x8c\x11\x89\x22\xbf\xaa\x8d\xdb\x9a\xf2\x72\x12\x71\xb7\x58\xf5\x5a\xc4\x0a\x7d\xe1\x64\x40\xa1\xf6\x60\xc5\x39\x84\xa2\x3b\xdf\xe9\x64\x3c\x3a\x74\x79\x71\x18\xcb\xb5\xb2\x17\xb0\x62\x34\xa1\x28\x13\xfd\x5e\x03\x7a\x99\x78\xea\x04\xd1\x5b\xd3\x8a\xfe\x56\xf1\xc9\x27\xd8\x96\x9b\x54\x1c\xbc\x17\x37\xb9\x9e\x0c\xfc\x01\x3e\x91\xe8\x18\xf4\xe5\x2e\x15\xf1\x0a\x95\x3b\xa7\x37\x50\x94\xa2\x03\x9d\xd2\xcb\x8e\x0e\x03\x01\x79\x74\x4c\x0c\xd4\xe9\xa3\x13\xa1\xbe\xe2\x0d\x21\x53\xf0\x7c\x70\xd0\xc9\x94\x6e\x6f\x1d\x0e\xfd\xfe\x7b\xaf\x3f\x3d\x7f\x7e\x86\x3a\x8d\x86\xcd\x22\xde\xaa\x77\x2d\x21\xc9\x47\xc9\x76\x41\x53\xfa\xca\x6a\xde\xa6\xec\xb1\x7c\x78\xc7\xbf\x3b\x54\x60\x09\xfb\x5f\x61\x55\xf4\x6b\x08\x48\x23\x65\x91\x09\x72\x3c\xe9\x15\x8b\xfe\xc6\x11\x2d\x50\x1c\x8d\x5a\xc6\xd7\xfb\x38\x3d\xc1\xb9\x24\xce\x94\xbb\x0f\xb3\x4b\x6b\xd2\x1e\x4f\xb1\x4f\x6f\xa6\xb7\xea\xef\xf2\x58\x10\x14\x62\x61\x6f\x87\xb4\x30\xbc\xc3\x69\xbc\x03\x81\xd5\xdf\x41\x0b\xf5\x8e\xeb\x80\x57\x90\x20\x09\x25\x9d\xb4\xd4\x2f\x50\x6f\x11\x17\x35\x92\x09\x0b\x94\x98\x28\xe7\x8e\x60\x8b\x2f\xd4\x1e\x61\xd0\xba\xd2\x57\xe6\x12\x35\x1a\x11\x89\x9e\x23\xb5\xa9\xd6\x9b\x29\xd3\x50\x35\x81\x4e\x55\x96\x52\x2d\x4f\x32\x63\x41\x16\x67\xbe\x7a\x2d\x2b\xd4\x46\xd4\xae\xad\xe8\x00\x91\x88\x81\x48\xc4\x40\x04\x35\x99\x34\x43\x4a\x63\xd7\xaa\x34\x39\xf3\x44\x17\xc9\x52\x59\x46\x5e\xef\x52\x5a\x40\x1e\xd2\x81\x5f\xb6\xd8\x41\x20\xda\xb9\x69\xf9\xc2\xc8\xf6\x3c\x8e\xad\x22\x76\xbb\x69\xd3\xa7\x50\x93\x36\x01\x20\x79\xf0\xe3\x4c\xe0\xec\x7c\xc5\xa5\x76\x67\x09\xa6\xb5\x6c\xe6\xa0\xdd\xec\xb8\x9c\xfd\x58\x01\x00\xdb\x22\xde\xea\x60\x4a\x8d\x33\xa9\xbd\x52\xb9\xa9\xbd\x04\x17\x25\x31\x75\x5d\xaa\x8f\x97\xda\x6c\x59\x5d\x00\x9e\x87\xc0\x65\x43\x51\x00\x36\x08\xb3\x42\xc2\x90\x80\xa5\x04\x96\x90\x2c\xb5\x53\x02\xe9\x70\x13\x20\xc5\x29\x7b\x8e\xb6\x7f\x6b\x1a\x79\xac\x03\xea\x5c\x0c\x7d\x62\xdf\xbd\x52\xee\xa1\xa5\x2f\x89\xdb\x58\xbb\xfa\x48\xd7\xed\x36\x98\xbd\x24\x3c\x49\x5a\xa4\xa1\xc3\x46\xe2\x7b\xc9\xf4\xf4\x96\xbc\x73\x29\xe2\xa5\xf1\x22\x73\xea\x66\x95\x56\xc0\x9f\x35\x0f\x14\x5f\x31\x47\x6c\xc9\x8c\x6a\x1e\x47\xd4\xb8\x81\x18\x70\xc9\x45\x38\xd9\x71\x93\x0c\xf8\xc3\x81\xc1\x47\x7d\x08\xce\xb0\x28\x03\xa8\x86\x17\xac\x75\x9b\xb2\xa2\x37\x70\xb7\xa7\x6e\x31\x79\xbf\xba\xb2\xc5\xb7\x0a\xf1\x54\xfc\xc4\x7c\x0d\xc0\xe0\x88\xa4\x60\xa5\xfe\xec\x00\x28\x70\x7f\x27\xae\x27\x27\x83\x5a\xa3\x3b\x2b\x77\x5d\x9a\xbb\x55\x99\x2c\xf0\x3d\x2e\x65\x0f\xd9\xa9\x30\x38\xa8\xd8\x9b\x8c\xb0\xe0\xfe\xe4\x9c\x4c\x1b\x83\x3f\x60\x45\xf4\xf1\x26\x78\xf4\x84\x80\xe5\x23\xa4\x38\x46\x37\x9b\x36\x11\x8a\x50\xfb\x5a\xfc\xf2\xf3\x0f\x17\xe3\x7f\xfd\xe3\x9f\x93\x8b\xc3\x5f\x7e\x1e\xf4\xfc\xda\xc3\x04\xf5\xb9\xdd\x80\x83\x7d\xa9\x21\x39\x87\xb5\x49\xbc\x59\xa6\xa8\xf8\x07\xdf\xcd\x5f\xbd\x04\x55\x89\x8c\x52\xab\x1d\x73\x39\x18\xfe\xa0\x3b\x55\x9a\x0a\xe5\xc1\x81\x9f\x98\xfe\xd8\x8e\x8e\xbd\x42\xd9\xc5\xac\xe3\x23\x6f\x21\x92\xc0\x67\x80\x8b\x81\x29\x4a\xca\x7b\x47\x39\x13\xaf\x80\x5f\x60\x35\xa6\x23\x44\xaf\x1f\xc5\x6e\x55\xe7\x5e\x14\x36\xaa\xd0\x68\xc7\x2a\x86\x95\x36\x1c\x7a\xae\x81\x12\x5d\xcf\x10\x24\xbe\xbf\x6b\xb0\x19\x87\x52\x00\x6f\xc6\x28\x24\x92\x12\x11\xc3\x82\x48\xb8\x2a\x0f\x0f\xe8\xf3\x7f\xdc\x41\x54\xd4\x78\xe2\x1a\x0f\xcf\xbc\x35\x8d\x05\xc1\x80\xc9\xdd\x0e\xf4\xc5\xfc\xbf\x8e\xb0\xdb\xc3\xe9\xff\x4f\xac\x11\x20\x4a\x63\x17\x87\x3b\x87\x93\x5b\x0e\x44\x7d\x64\x0f\x12\x51\x2f\x10\x37\x95\xbe\xec\xd8\xd2\xde\x42\x90\x0d\xd0\x59\xba\xbe\x8a\xe4\x0e\x2f\xa9\x19\x14\x3b\x8e\xa8\x75\xc0\x71\x3f\xae\x56\x2b\x8c\x84\x5e\x40\x8b\x4b\x84\xcc\xac\xbc\xb9\x25\x1c\xd5\x4d\xda\xce\x64\x97\x6c\x24\x50\x01\x81\x4f\xf0\xce\x68\x20\x88\x6d\xa2\x14\xd6\x61\xf9\xd1\xa3\x9b\xda\xd5\xa3\x1b\x60\x31\x3d\xbe\xed\xac\x3d\x3c\x7a\x47\x33\xee\xd1\xa3\x9e\xe2\xe4\x40\xf8\xa8\x40\x83\x3a\x15\x1c\x14\x68\xa6\x56\x7a\x66\xce\xcc\x39\x42\xc6\xa3\x3f\x2f\x9e\x3e\xfc\x62\x34\x69\x75\x14\x7b\xdc\xde\x46\x3d\x5d\xff\x04\xb6\x1d\xb3\x3a\xa7\x47\xf0\x69\x32\x0e\xc7\xf8\x52\x6e\xa7\x00\x67\x79\x91\xa9\x95\x42\x8a\xd8\x8d\xca\x3d\x54\x70\x2a\xcb\x44\x66\xcc\x25\xf7\x5a\xdf\x68\x19\x4d\xd0\x2c\x41\xc0\x83\xdb\x41\x13\x86\xe2\x9b\xd8\xc1\x61\xc0\x33\x8e\xab\x77\x59\x69\x4d\x54\xe8\x2b\x3d\x42\xae\x2c\x02\xa3\x24\xba\x34\x3c\x1b\x50\x46\x62\x40\xc1\xb1\x1a\xd5\xc3\x42\xa0\x7f\x13\xf8\x00\x74\xc7\x38\xc5\x93\xfa\x75\x88\x33\x58\x51\x5f\x97\xd4\x43\xfa\x69\x27\x55\x49\xcc\x94\x13\x02\x83\xa6\x9f\x74\xb0\x7f\xb6\x46\x7a\x4c\x7d\x42\x5a\x5f\x15\xf8\x7e\xc9\x24\x97\x12\x88\x6c\x29\xd9\x3c\xc6\x7c\x91\xdf\xa1\x64\x14\xae\x6f\x8e\x3d\xc6\xf2\xb4\x7c\x29\xb6\x94\x34\x2f\xeb\x14\xde\x5b\xee\x98\x91\x21\x8c\xc6\xc8\x68\x37\x14\x40\x9e\x73\x26\xf6\x01\x37\xa3\x54\x7c\x7a\xfe\x52\xbc\xc5\x56\x5e\x79\xd7\xdc\xd7\x7c\xfa\xf9\x17\xc7\x47\x9f\x4e\x82\x48\x9a\xdd\x6e\x38\x01\xa1\xf5\x20\x18\xde\x18\xd3\x42\x67\xa5\x57\x66\x3c\x9c\x53\x5f\x6e\xcf\xa7\x45\x5a\x11\x15\x98\xb0\xe5\xb7\x85\x26\x41\xc8\xad\x13\x74\x65\x25\xc3\xdb\x26\x27\xf7\xda\xf0\x86\xa2\x8d\xf6\xdc\x08\xb6\x7d\xc6\x60\x14\xe0\xcf\xef\x6e\x02\xda\x7e\xd8\xd1\x0d\x00\x07\x88\x47\xb7\x2d\xac\x8d\xc4\x33\x40\xa0\x55\x45\x58\x33\x40\x53\x1a\x6e\x53\x23\x2d\xe1\x24\x17\x5f\x22\xec\xe9\xb2\x32\xe3\xc9\x3c\x04\xa9\xbf\x35\x72\xc0\xe1\x6b\x13\x50\x38\x4f\xff\x60\x92\xca\x82\x6e\x61\x8c\xc7\xf5\xe0\xe5\x61\xef\x79\x80\xb5\x56\x4a\x04\x70\x06\x18\xaa\x48\xd3\x4d\xb5\x6e\x64\xf2\x0d\xeb\x30\x57\x49\x69\xe8\x46\x55\x25\xc0\xd7\xc8\x91\x21\x42\xb1\x4a\x9b\xa8\x8e\x86\x5e\x3a\xc0\xfc\xf9\x28\x6f\xe5\x03\x82\x56\xb9\x14\x5f\x7e\x19\x7d\xf9\x3b\x42\xe4\x40\xcf\x81\xb1\xed\x66\xe3\xec\xfb\x79\x9d\x75\x71\x89\xa0\xcf\x89\x0e\xaa\x68\xee\xf3\x0c\xc1\x41\xcd\x78\xdc\x9b\xe9\xa5\xf9\x4b\x93\xe7\xa8\x07\x74\xed\x6b\xba\x83\x54\xb7\xdf\x84\x2a\x91\xfa\xaf\xb7\xca\x04\xdf\x77\x9c\x3b\x31\xb4\x1b\x9a\xad\x86\x0c\xf9\xb0\xf4\x18\x0e\x52\x7c\x4d\x94\x29\xb7\xf3\x33\x8e\x97\x4b\x3a\xc6\xa8\x43\x3c\x64\x58\xe5\x2a\x3e\x34\x1b\x2e\xa1\x79\x04\xc2\x19\x20\x15\xeb\x19\x4d\xa7\x7e\x00\xa2\x8d\xed\x1d\x32\x66\x05\x4a\x36\x47\x23\x20\x7c\x42\x05\x20\x5c\x40\x77\xe6\xb0\x58\x6b\xc3\x1b\x7c\x65\x20\xf3\x3b\xa5\xe6\xb7\xc2\xf1\xde\xcc\x94\x11\xb0\xaf\x8b\xe4\x5b\x3f\x9a\x86\x4b\x1f\x93\xa6\x99\x07\xc5\x05\xb5\x47\xcd\xce\x0a\x55\x8d\x22\x84\xb7\x85\xba\x71\x8e\x82\x66\x37\x54\x86\xb7\x88\x27\x1e\x3e\x79\xf2\x9d\xbd\x3e\x17\xdf\x62\xd8\xc1\x9c\x04\x9b\x13\xa9\xae\x24\x7b\xaa\xbe\x93\xc7\x29\x90\x00\x4b\x41\xa0\xda\xeb\x50\x84\x7e\xcc\x17\x65\x34\xe2\xf8\x41\x9a\x72\xb4\xf6\xcd\xa6\x5c\x90\x86\xed\x75\xed\xa6\x24\x95\xf9\xb2\xc2\xab\x55\xd7\xe5\x39\x25\xce\xb3\x9a\xdc\xef\x0b\x29\x4c\x67\xa6\x69\x56\xcc\xc4\x77\xf1\x55\x3c\x4f\x4a\x55\x38\x91\xa3\x01\x29\x8b\x81\x52\xa7\x76\x2f\x33\xe2\xf0\xc2\x86\xd6\xff\x24\xa6\xb1\x3b\x42\x24\x2c\x82\xfc\xc0\x3b\x83\xfe\xb6\xee\xb3\x74\xb5\x56\x95\x25\x79\x30\xb8\x0f\x26\x52\xdf\xec\xfd\x60\x42\xeb\x11\x3d\x36\xbf\x98\x70\xfb\x60\x96\xfb\xa6\xfd\x1b\x80\x8e\x8a\x1a\x5d\xe3\x93\xc2\xc3\x63\xaf\xf8\xd4\xaf\x05\x56\x58\x0d\xdf\x06\xd4\x93\x6b\xf4\xe7\x35\x7e\xe6\xcb\x14\xf7\x78\x3e\x6b\xbe\x10\xa7\x31\x36\xb4\x17\x8e\x3b\x1c\x5e\xbf\x01\x0f\xf6\x20\xb2\x5f\x07\xc7\xfe\x33\x16\xbb\x13\x88\x7d\x08\x85\xf5\x20\xd8\x9d\xf8\xcb\x83\xaf\x7b\x22\xaf\x8f\x81\x5d\x1f\x89\xb9\xf6\x00\xae\xbb\xd1\x56\x80\x5a\xa2\x93\xd8\xfe\x97\x85\xfd\x67\xe6\x7f\x53\x0b\x17\x34\x53\x14\xb9\x75\x28\x9d\xfc\x4b\x05\xe5\x5a\x34\xb8\xdf\xb8\xfb\xe1\x49\xe4\x7e\xb3\xee\x0d\xc4\x7f\xc3\x10\x02\x6e\x40\x6f\x76\x8a\x31\xa2\xbc\xf4\xf7\x64\xfd\x1e\x4f\x15\x87\x60\x1a\xf0\x11\x51\x27\xb1\x6e\x66\x10\xbe\x53\x41\xb9\xba\x75\xaf\x14\x9a\xe9\x2c\xc3\x1e\xba\xe3\xf2\x0a\x4c\x3c\x2e\xab\xbd\x53\xd7\x75\x0f\x1f\x69\x78\xbb\xe5\x9a\x3b\xc6\xdd\x7b\xb8\xe6\x57\xcc\xba\x62\x1f\xae\x09\xc8\xb4\x8e\x4a\x9e\x30\x1f\x20\xf0\x3a\x71\xf7\x2b\x26\xd2\x3d\xf9\xd2\x73\x7f\xbd\x2d\x16\x8f\xf8\x6a\xb4\xb2\x9e\x83\xff\x21\x4a\x26\x1b\xed\xaf\x0a\x9b\x1b\xc2\x2d\x23\x4d\xa3\xd7\x51\x87\x9d\xf5\xec\x0a\x99\x80\xe1\xd7\x00\xb5\x31\x95\xc2\x58\x7b\xec\xca\x1d\x01\x5e\xf4\xd0\x45\x39\x7f\xdf\x28\x86\x9e\xcd\x50\xbc\xf1\x21\x4a\xa7\x93\x17\x8e\x1a\x8a\x2d\xd0\x95\x65\x47\xc2\xac\xc0\x4c\xe1\x4f\x98\x22\x7b\x4d\x9a\xf8\xae\x1f\x7e\x8a\xb9\x95\x46\x3f\x5d\x4f\x9a\x32\x40\x71\x77\xfd\xef\x00\x00\x00\xff\xff\x68\x18\xcd\xf0\xa7\x1f\x00\x00")

func index_stdioJsBytes() ([]byte, error) {
	return bindataRead(
		_index_stdioJs,
		"index_stdio.js",
	)
}

func index_stdioJs() (*asset, error) {
	bytes, err := index_stdioJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index_stdio.js", size: 8103, mode: os.FileMode(420), modTime: time.Unix(1507327742, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _shimGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x8c\xc1\x0d\xc2\x30\x10\x04\xff\xae\x62\x1b\x48\xfc\xa7\x06\x1e\xb4\xb0\xc6\xe6\x38\x85\xdc\x59\x67\x07\x89\xee\x41\xca\x87\xe7\x8c\x34\x93\xb3\xf8\x45\x9a\xb5\xe0\x6c\x10\x5f\x8a\x5a\xe5\x24\x96\xbe\x09\xc6\x53\x77\xac\x29\xe5\x8c\x1b\xef\x1b\xa5\x9d\xaa\x87\xbf\xb5\xb6\x01\x9e\xfc\xf0\x40\x1c\x66\x6a\x02\x46\xd1\x19\x8c\x0f\x5e\x34\x39\x7e\xcd\x80\x1b\xae\xdc\x4b\xe5\x9a\xfa\xdf\x27\x7d\x03\x00\x00\xff\xff\xb4\x05\x8d\x5f\x7e\x00\x00\x00")

func shimGoBytes() ([]byte, error) {
	return bindataRead(
		_shimGo,
		"shim.go",
	)
}

func shimGo() (*asset, error) {
	bytes, err := shimGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shim.go", size: 126, mode: os.FileMode(420), modTime: time.Unix(1478287898, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go":          bindataGo,
	"index_http_proxy.js": index_http_proxyJs,
	"index_stdio.js":      index_stdioJs,
	"shim.go":             shimGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go":          &bintree{bindataGo, map[string]*bintree{}},
	"index_http_proxy.js": &bintree{index_http_proxyJs, map[string]*bintree{}},
	"index_stdio.js":      &bintree{index_stdioJs, map[string]*bintree{}},
	"shim.go":             &bintree{shimGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
