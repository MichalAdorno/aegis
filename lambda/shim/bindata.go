// Code generated by go-bindata.
// sources:
// bindata.go
// index_http_proxy.js
// index_stdio.js
// shim.go
// DO NOT EDIT!

package shim

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(436), modTime: time.Unix(1512596138, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _index_http_proxyJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xdf\x6f\xdb\x36\x10\x7e\xa6\xfe\x8a\x9b\x30\x54\x12\xe2\x49\xd9\xb0\x3d\x4c\x86\x07\xb4\x9d\xb7\x75\x68\xd3\x6e\xf1\x8a\x3d\x0c\x48\x68\xf1\x64\x31\x95\x49\x8d\xa4\xea\x18\xa9\xff\xf7\xe1\x48\xc9\x91\x93\x0c\x1b\xf6\xb4\x3e\x34\x21\xf9\xdd\x7d\xdf\xfd\x54\xa2\x4a\x2b\xeb\xe0\xcd\xf3\xdf\xaf\x7e\x78\xfe\xea\xf5\x25\x2c\xe0\xeb\x79\x14\x7d\xe4\x06\xaa\x46\xb6\xe2\xaa\x33\xba\x42\x6b\x61\x01\x06\xff\xec\xa5\xc1\x34\x39\x79\x48\xb2\x59\xc4\x36\xda\x1f\x61\x01\xaa\x6f\xdb\x59\xc4\x84\x56\x08\x0b\x20\xe7\xba\xc5\xbc\xd5\x9b\x7c\x2d\x95\x48\x87\x0b\xb2\xa9\xb9\x6c\xc9\xed\x79\xc4\x1a\xe7\xba\x29\x01\x9d\x93\x6c\x1e\x45\x69\xdd\xab\xca\x49\xad\x40\xe1\xee\x6a\x60\x49\x33\xb8\x8b\x22\x56\x14\xd0\xc9\x0e\xc1\x3a\x21\x55\xa1\x7b\x37\x83\x75\x2b\x95\x80\x8e\x5b\xeb\x1a\xa3\xfb\x4d\x43\x8f\x68\xcc\x54\xe0\x89\xf8\xdc\x76\x7c\xa7\xd2\x24\x2f\x38\x6e\xa4\xbd\xe2\x5d\xe0\x1d\xf1\xb9\x56\x69\x82\xc6\x68\x93\xcc\x60\xd4\x92\xa2\x31\x24\x81\xb1\xa3\x17\xcf\x92\xef\x8c\x74\x98\xc6\x23\x97\xb7\x43\x51\x42\x7c\xf6\xf3\xe5\xdb\x8b\xdc\x3a\x23\xd5\x46\xd6\x7b\xef\xe0\x2c\xfe\x43\xc5\xd9\x3c\x62\x4c\xd6\x90\x9e\x9d\x85\x74\x7c\x77\x5f\x89\x40\x71\xe4\xc0\x5b\xe9\xd2\x2f\xb3\x39\x14\x05\xd4\xda\x54\x48\xc9\x75\x5c\x2a\x34\x60\xd0\x3a\x6e\x1c\xf0\xda\xa1\x01\xa7\x35\x6c\xb9\xda\x83\x77\x19\x31\x76\x88\x18\x3b\xc9\x1f\xb1\x52\x85\xbc\x90\x79\xc4\x0e\x8f\x63\xbe\x95\x6e\x1a\x72\xa5\x05\xfe\xab\x98\x6f\xa5\x43\x01\x9d\xc1\x2d\x77\xbd\xc1\x76\x0f\x3b\xe9\x1a\x20\x7b\x4a\x04\xfd\xfc\x5f\x44\xae\x70\x07\x4b\x2a\x50\x1a\x2f\x83\xe6\xa3\xce\x41\x66\x36\x66\xe6\x90\x91\x5d\x84\xb7\x9d\x36\xce\xe6\x0d\x57\xa2\x45\x03\x8b\x49\x43\x7c\x44\xe5\x66\x5e\x16\xde\xba\x63\x7b\xf2\x76\xc7\xf7\x16\x74\xef\xba\xde\x81\xd3\x50\xf5\xc6\xa0\x72\x23\x30\xb1\x40\x5a\xa6\xd3\x42\xd7\x39\x1d\x8f\xe3\xe2\x3d\xce\x83\xc3\xb1\x42\xbe\xe5\x87\xd4\x3f\x68\xad\x3b\x0f\x64\xb1\x97\x14\x97\x10\xa4\x0d\x97\x83\xbb\xb8\x1c\xa9\xfc\xfd\xe1\xd8\x8b\x11\xa3\xb9\xa7\x30\x61\x01\xdf\x7e\x73\x7e\x3e\x8f\x98\xac\x43\x78\xb9\x75\x7c\x83\xef\xb9\x91\x7c\xdd\xa2\x85\xcf\x16\x0b\xe8\x95\xc0\x5a\x2a\x14\xf0\xec\x19\x3c\x85\xca\x5b\xbe\x5d\x0b\xfe\x8e\x3c\xfe\x27\x03\x5a\x27\x43\xdf\x05\x55\xff\x60\x44\x25\x0b\xb9\xf2\x3b\x65\xb2\x0a\x42\x6c\xba\xa3\x82\xd1\xda\xb9\x8b\x18\x40\xa3\xad\x53\x7c\x8b\x25\x24\xad\xae\x78\x4b\xe7\x64\x46\x2f\x44\x57\xfa\xff\xc3\x91\xbb\x66\x48\x66\x4e\xbf\xc3\xa7\x4f\x90\x14\x01\xba\x45\xd7\x68\x31\xbe\x12\xef\x1b\x7f\xe3\x31\x3f\x2e\x57\x01\xd5\x20\x17\x68\xec\x11\x16\x8e\x84\xf1\x4a\x00\x92\x97\x54\x13\xe5\xbe\x58\xed\x3b\x4c\x4a\x48\x78\xd7\xb5\xb2\xe2\x24\xb8\xb8\xb1\x5a\x05\x3f\x13\xe0\x6b\x54\x1b\xd7\x24\x25\xbc\xe8\xeb\x1a\x4d\xbe\xde\x3b\x0c\x77\x43\xc9\xd6\x5a\xec\x33\x32\x3a\x44\xec\x30\xf4\xd0\x64\x25\xa7\xf1\xf2\xfd\xf2\x62\x55\xfa\x61\x7c\xf0\xe4\x1d\x64\x4f\xd9\xbc\x7d\xb7\x7a\xf5\xf6\xe2\xf2\x49\xab\x21\xbd\xde\xae\xe2\x6d\xbb\xe6\xd5\x87\xe9\xa0\x18\xb4\x9d\x56\x36\xac\x12\x00\xaa\x88\x41\xfb\x42\x8b\x3d\x2c\x20\x49\xc8\x0c\xa0\x28\xb8\xd2\xae\x41\xfa\x02\xf5\xea\x03\xe8\x1a\x04\x77\x1c\x1a\x6e\x61\x8d\xa8\xc0\x60\x25\xf1\x23\x8a\x19\x58\x0d\xbc\xeb\x50\x09\x90\x7e\xc0\xae\xad\x33\xd7\xe4\x63\x24\xf2\xcb\x8c\xac\x27\xcb\x0c\x52\xef\x37\x1b\x13\x3f\x2a\x38\x5b\x04\xc2\xb9\xcf\x58\x16\xc4\x9c\x38\x7a\xfc\x25\x08\xbd\x59\x14\xd3\x24\x5c\x77\x46\xaf\x5b\xdc\x86\x8d\x42\x1f\x35\xb4\xae\x84\xcf\xef\x30\xdf\xa2\xb5\x7c\x83\x87\xeb\xc9\x0a\xce\x4e\xf8\x8a\xc2\x35\x08\xbb\x46\xb7\x78\xe4\xfe\x9b\xc8\x77\x08\x37\xbd\x75\xd0\x19\xa9\x1c\x25\x40\xf7\x0e\x1a\x34\xf8\x58\xb7\x12\x27\xf1\x0f\xa1\xb3\x93\xba\xfe\xb4\x5a\xbd\x83\x5f\x97\xbf\xfc\xb6\xbc\x5c\xc1\xf2\xe2\xfb\x38\x08\x3b\x01\x0d\xa9\xf2\x3d\xc5\x8a\x82\xea\x77\x03\x0b\xf0\x3b\xa8\xe3\xc6\xe2\x11\x31\x9f\x40\xec\x08\xb9\x5f\x53\x37\x01\x00\x10\x96\x31\xfd\xd1\x00\x77\x11\x0c\xff\x58\x6c\x1d\x77\xbd\x7d\xa9\x05\xc6\x25\xc4\x5f\x9d\x9f\xc7\xb3\xc9\xeb\x30\x3c\x71\x39\xb5\x61\xf1\x74\x80\xc8\xec\xe1\x00\xc5\xf7\xe0\xc3\xc4\x5d\x51\xc4\x34\x28\x71\xf9\x54\x1c\x13\xd6\x29\xe8\x3e\x92\x47\xc0\xc3\x7d\x41\xe9\xfb\x43\xfb\x20\x1f\x9a\x60\x9c\x8f\x19\x8c\xc3\x91\xe5\xa8\x84\xff\xbc\x44\x87\xbf\x02\x00\x00\xff\xff\x90\xbd\x5d\x5e\x8b\x09\x00\x00")

func index_http_proxyJsBytes() ([]byte, error) {
	return bindataRead(
		_index_http_proxyJs,
		"index_http_proxy.js",
	)
}

func index_http_proxyJs() (*asset, error) {
	bytes, err := index_http_proxyJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index_http_proxy.js", size: 2443, mode: os.FileMode(436), modTime: time.Unix(1510187626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _index_stdioJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\xdd\x72\x1b\x37\xb2\xbe\xe7\x53\xb4\xa7\xea\x98\x64\x89\x1e\x5a\xa9\x9c\x9c\x84\x0a\x4f\x4a\x8e\xe5\x58\x39\xfe\x2b\x4b\xa7\xb2\x55\x8e\x57\x05\xce\x34\x39\x08\x31\xc0\x04\xc0\x88\xe2\xa6\x74\xb5\xfb\x3e\x79\x87\xbc\xca\xbe\xc8\x56\x37\x30\x3f\xa4\xa8\xb5\x93\xcd\x6e\x6d\xad\x2f\x2c\x12\x68\xf4\x1f\x1a\xdd\x5f\x37\x07\x99\xd1\xce\xc3\xcb\xd3\x3f\x5c\x3d\x3b\x3d\x7f\x71\x01\x73\xf8\xf4\x64\x30\xa8\xac\xc9\xd0\xb9\x14\xf5\xf5\xbb\xe1\x9b\xd3\xcb\xe7\xc3\xf7\x30\x87\x43\xab\x47\x30\x9c\x0d\xe1\x68\x77\xef\xc5\xe9\xcb\x27\x4f\x4f\xaf\x2e\x4f\x2f\xfe\xef\xea\xed\xeb\xd7\x97\x3d\xba\xab\xab\x5c\x5a\x2d\x4a\x3c\x19\x4c\xa7\x40\xd2\x8d\xc2\x54\x99\xd5\xe8\x00\xf7\xf1\xc9\x60\x70\x2d\x2c\x64\x85\x54\xf9\x55\x24\x80\x39\x58\xfc\xb1\x96\x16\x47\xc3\x9d\x8d\xe1\x78\x32\x00\x58\x19\xfe\x0e\x73\xd0\xb5\x52\xb4\x92\x1b\x8d\x30\xef\xcb\x4a\x17\x52\xe7\xa3\xb8\xc0\xa7\x96\x42\x2a\xe2\xfc\xf8\x64\x40\x7a\x5d\x16\x08\x4b\xa3\x94\xd9\x48\xbd\x82\x91\x51\xf9\x18\x44\x55\x59\x23\xb2\x02\x0a\xe1\x40\xc0\xa2\x5e\xc1\xa6\x40\x8b\x20\x34\x48\xed\xd1\x6a\xa1\xc0\xa1\xbd\x46\x0b\x68\xad\xb1\x20\x1d\x58\xf4\xb5\xd5\x98\x43\x5e\x23\x78\x03\x65\xad\xbc\xac\x14\xb2\x09\xe8\xbc\x23\x69\x9b\x42\x66\x05\x78\x2b\x57\x2b\xb4\x1d\xc9\x0b\x51\x2e\x72\xe1\xc0\xdb\x2d\x69\xe1\x0d\xd4\x0e\xc1\x17\x08\x4e\x94\x08\x95\xac\x30\xa5\xe3\x8d\xc5\xce\xe7\x52\xc3\xc6\x4a\x8f\x41\x81\x19\xed\xfe\x44\xff\x01\x24\x99\xc9\x31\x99\x41\x72\xf6\xf5\xeb\x57\xaf\xde\x9e\x5d\x9c\x5d\x26\x93\xb8\x85\xd6\x6a\x73\xcf\x9e\xdb\xba\x4c\x28\x45\xbb\x16\x45\x9e\xd0\xf2\x6d\x9f\x2f\x4b\x7a\x89\xce\x89\x15\x36\x54\x70\x58\x88\xb1\x97\xdb\x2a\x28\x41\x5f\x3a\x19\x5e\x64\xeb\x4b\x2b\x32\xda\x7b\x17\x16\x81\xcf\xdc\x54\xc6\x7a\x97\x5e\xb1\x86\x67\x37\x19\x56\x5e\x1a\x0d\xa3\xda\x4b\x95\xfe\xe0\x66\x9f\xff\xcf\xe3\xd9\xf1\xf1\xb8\xe1\xc4\x87\xde\x90\x5f\x8c\x66\x3d\x46\x1a\x3d\xd1\xfd\xf7\xa7\x9f\xce\x3e\xf9\x6c\x9c\x04\xb2\xf7\xc1\x08\xfa\xbf\xf0\xbe\x72\xb3\xe9\x74\x25\x7d\x51\x2f\xd2\xcc\x94\xd3\xb2\x10\xd6\x4f\x91\xdc\xbb\x30\xe5\x82\xa8\x96\xb5\xce\x58\x30\xaf\x3e\x31\xe5\x62\xe4\xbc\x45\x51\x4e\x80\x9c\xb3\x10\xd9\x7a\xdc\x38\x44\x2e\x21\x6e\xc2\x3c\xc4\xe0\x18\x9a\xef\xed\x2b\x71\x3e\x37\xb5\xef\x0e\x34\x5c\xba\x23\xdd\x4a\xf7\xb4\x6e\xa4\x1f\x84\x33\xbb\x0a\x3d\x93\xca\xa3\x1d\xa1\xb5\xad\x16\x81\x2d\x5a\x9b\xd2\xbd\xc3\x7c\x3e\x87\xe1\xd9\x9b\xf3\x37\x67\xc3\x71\x8c\xc9\x56\xc2\x68\x3c\x68\xce\x4c\xa7\x70\xbe\xa4\x08\xb3\x38\x74\x50\x1a\x4b\xe1\x26\x34\xd0\x03\x0a\x21\x5d\x08\x9d\x2b\xb4\x30\x92\x38\x81\xda\x8d\x27\xbd\xa3\xbe\x40\xcd\xe1\x19\x48\x37\x46\x0f\x3d\x2c\x10\x16\xf5\x62\xa1\x30\x87\xba\x02\xa1\xb7\x1b\xb1\xed\xab\x18\x5c\x93\x2a\xe9\x3c\x6a\xb4\x6e\x34\xe4\xd3\xc3\x71\xaa\x50\xaf\x7c\x01\x5f\xce\xe1\xb8\x67\x16\x44\x67\xa6\x16\x4b\x73\x8d\xa7\x4a\xbd\x68\x8f\x8e\x1b\x4d\xde\x58\xf4\xa8\x73\xd8\x20\x6c\xe8\x85\x6a\xa4\x47\x49\x66\xdd\x61\x83\xa5\xf4\x8d\xcc\x09\xb0\x0b\xa1\x61\x73\x49\x06\x11\x01\x08\x47\xca\x7e\x04\x3b\xa3\x7b\xcc\xba\xbb\x19\xb7\xec\x2c\x0a\xef\x45\x56\x4c\xe8\x53\xbe\x85\xa5\xb1\xec\x33\x8d\x37\x3e\x38\xee\x41\xc3\xf4\x36\x7c\xb8\x8d\xd7\xf3\x01\x09\xed\xc3\xec\x62\x74\xcc\x39\xf6\x8f\x90\xcb\x9c\xae\xc2\x21\x96\x94\x45\x0a\x54\x55\x1a\xd2\xdc\xeb\xa7\xaf\x67\x70\x69\xb7\xb4\x2c\xae\x8d\xcc\xc1\x17\xd2\x7d\x05\xe7\x90\x09\x3a\x22\x4b\xb1\x92\x1a\x21\x33\x15\xe5\xa0\x09\x68\xe3\xa1\x34\xd7\xfc\x99\x48\x29\x2b\x82\xe1\x94\x47\xa9\xd1\xcb\x12\x29\xed\xad\xc8\x4c\xb6\xad\x42\xbb\x34\xb6\x14\x3a\x0b\xc9\xea\xb2\x11\x54\xa1\x2d\xa5\x73\x14\xc4\xd2\xb9\x1a\x5d\x9a\x32\xc1\x5b\x14\x4a\x6d\xa1\x10\x9e\x13\x26\x49\x0e\x92\x96\x52\x61\x4f\xca\x48\xe8\x1c\xca\xeb\xc6\xb8\x8d\xb1\xeb\x31\x33\xa0\x82\xb1\xdc\xa9\x12\x4b\x37\x0c\xae\xa0\x80\x7b\xb0\xe4\x97\xe4\xbc\xbb\xd8\xea\x6c\x34\x9c\xfa\xb2\x9a\x0a\x5c\x49\x77\x25\xaa\x6a\x38\x6e\x63\x6d\xa7\xb6\xa4\x78\x83\x59\x38\x90\x55\xd0\x92\xc3\xee\x69\x78\xf8\x10\xb2\xa2\x34\x39\x1c\xdd\xc0\x3e\xe3\x93\x2e\xeb\x3c\xc5\x45\xbd\x1a\xdc\xa7\xa8\xf4\x58\xd2\xf2\xd2\xa5\x14\x23\xb9\xb4\x41\x70\x3a\xa5\x5d\x72\xea\x88\x8e\xca\xf9\xe3\x13\x90\x5f\x32\x75\x7c\x2c\x27\x20\x8f\x8e\xc8\x00\x0a\x9f\x7e\x6d\x4d\x92\xf1\xc9\x47\x2e\x3e\x3b\x7f\x71\x36\x83\x04\x8e\x80\x39\xbf\x93\xef\x23\x15\xc9\x74\x5e\xf8\xa8\x1a\x7d\x64\xbd\xf6\xc8\x76\x98\x3d\xba\xe7\xdf\x21\xc9\xcc\xfb\xc0\x3a\x2d\x0d\xba\x74\x21\xbc\x4b\xa5\x7b\x26\x15\x8e\xc6\x8d\xa9\xfb\x47\x86\xb4\x40\xf1\x32\x8c\xfc\x6e\xef\x30\x78\x2a\x2d\x66\xde\xd8\xed\x07\xb8\xe4\x0d\x5d\x8f\xd5\x1d\x15\x99\xd2\xc9\x3f\xe1\x0c\x08\xe3\xb0\x8c\x77\x09\x2d\x24\x87\xdc\xc2\xe4\xa5\xc9\x77\xc9\x69\x81\xc9\x6f\x23\x04\x91\x0e\x32\x7a\x47\xe8\xa8\x04\x2c\x14\xdd\x73\x03\x4e\xe2\x02\xbd\x35\x5f\x08\x4f\x48\x24\xe4\xde\x00\x1a\x68\x5d\xea\x6b\xb3\xc6\x1c\x7e\xac\x65\xb6\x06\xd4\xa6\x5e\x15\x13\xa6\xa1\x04\x01\x99\xa9\x55\x4e\xe9\x39\x53\xc6\x61\x0e\x42\x85\x84\xb4\xa8\x3d\x08\xd0\xb8\x81\x1e\xb6\x48\x19\x5b\xa4\x8c\x2d\x46\x63\xe2\x4e\xd5\x03\x73\x58\x5a\x53\x32\xcf\x42\x68\x95\xa3\x4d\x83\xde\x16\x5d\xad\x3c\xe9\xc0\x9b\x1d\x1c\x00\x63\x81\xeb\x50\xc8\x75\x6c\xcf\x13\xe1\x24\xb1\xdb\x4e\xda\xd2\xa3\x8d\x2f\x22\xe6\x09\x78\xc6\x9b\xc8\xd9\x87\x24\x4a\x15\xcc\x11\xf2\xea\xd8\x5c\x18\xd8\x14\x5b\xce\x50\x3f\xd4\xce\x83\xab\xc4\x46\x47\x53\x1a\xe8\x48\x15\x93\x32\x48\xe3\x25\x7d\x6d\x32\x41\x85\x94\x52\xde\x5a\x9b\x0d\xab\x9b\x58\x7c\x54\x3b\x4c\xa0\x12\xd6\x83\x59\x82\xe4\x52\xbd\xc0\xcc\x94\xc8\x52\x7b\x59\x8d\x6e\x36\x43\xab\x27\xec\x39\x3a\xfe\x8d\x69\xe5\xb1\x0e\x0e\x96\xc2\x79\x10\xa1\x20\xe5\x5c\x16\x6d\xc8\x72\x1b\xa1\x7d\x73\xa5\xab\xee\x98\x37\x74\x31\x41\x8b\x3c\x16\xcd\x14\xbe\x43\xa6\xa7\x5d\xf2\xce\x1a\xc4\xc2\x04\x91\x25\x15\xa8\x5a\xcb\x1f\x6b\x6c\x78\xa0\x4b\xe1\xc2\x0b\x8f\x8a\xb2\x17\x47\xd4\xa8\x45\x0d\x1a\x37\x57\xf1\x66\x47\x6d\xbe\x9b\x4e\x43\x60\xf0\x55\x4f\x4d\xed\x27\xb0\x50\x52\xe7\x50\x09\xe7\x7c\x61\x6b\xda\x41\x6b\x03\x75\x07\xb3\x77\xf3\x24\x5b\x7c\x27\xab\x4e\xe0\x27\xe6\x6b\x66\xf0\x6e\x48\x52\x86\x13\x68\xfe\xf6\x30\x11\x5a\xfb\x1e\x6e\xc7\x27\x83\x46\xa3\x7b\x73\x70\x93\x64\xfb\xf9\x95\x2c\x08\x65\x2b\x67\x0f\xb9\x09\x98\x0a\xad\x08\x26\x1b\x1f\x4a\x8e\xf7\x98\xb7\x06\x7f\xc0\x8a\xf4\xb7\x9b\x10\x00\x91\x74\xc0\x57\x48\x71\x6c\xec\x7a\xd2\x46\xa8\x36\x9b\xaf\xe0\x97\x9f\xbf\xbf\x1a\xfd\xf5\xcf\x7f\x19\x5f\x4d\x7f\xf9\x79\xb0\xe3\xd7\x9d\x32\xdf\xdc\xdb\x1e\xc2\xdb\x95\x1a\x1f\x67\xd2\x98\xc4\x87\x31\x9f\x41\x72\xf4\xed\xc5\xeb\x57\xa9\xf3\x56\xea\x95\x5c\x6e\x99\xcb\x51\xf2\xbd\x4e\x42\x49\x6a\x32\xe3\xd1\x51\x68\x82\xfe\xb7\xeb\x06\x77\x70\x57\x1f\x86\x8e\x8e\x83\x85\x4b\x63\xc3\x0b\xf0\x42\x6a\xb4\xf4\xee\x3d\xbd\x19\xb1\xf4\x68\xc1\x1b\x03\xa5\xd0\xdb\xd0\x5d\xed\xc1\x1a\xd8\x8d\xc2\x56\x15\xea\xd6\x58\xc5\xb8\xd2\x85\xc3\x8e\x6b\x6e\xa4\xef\x7b\x86\x50\xee\xc7\xbb\xe6\x46\x7a\xcc\xa1\xb2\x58\x0a\x5f\x5b\xa4\x87\x28\x7d\x01\x19\xa7\xe4\xe4\x88\xfe\xfe\x9b\x3b\x88\x92\x1a\x37\x51\xa3\xe4\x2c\x58\xd3\x5a\x10\x0d\x18\xdf\xef\xc0\x90\xcc\xff\xe1\x08\xbb\xdb\x6f\xfe\xe7\xc4\x1a\x81\x9d\x5c\x78\x11\xc7\x08\x27\x77\x1c\x68\x6a\xcf\x1e\x24\xa2\x9d\x40\x2c\x6a\xbd\xee\xd9\xd2\x0d\x16\xc8\x06\x8b\x0e\xfd\xae\x8a\xe4\x8e\x20\xa9\xed\xfd\x7a\x8e\x68\x74\xc0\x0d\x3c\xa9\x97\x4b\xb4\x51\x40\x6b\xc2\x2d\xa0\x72\xb8\x7f\x24\x5e\xd5\x3e\x6d\xaf\x59\xcb\x0a\xcc\xd6\x8c\xd0\x35\x6e\x14\x61\x7c\xe1\x32\x29\x21\x2b\x84\x85\xe3\xc7\xfb\xda\x35\xdd\xd8\xc3\x87\xcc\xff\x5d\x6f\xed\xd1\xf1\x7b\x6a\x5b\x8f\x1f\xef\x28\x4e\x0e\x34\xb5\xaf\x6a\x0f\x73\xe0\xa0\xa8\x84\x75\x18\x98\x79\x73\xc1\x11\x32\x1a\xfe\xff\xe5\xb3\x47\x9f\x0f\xc7\x9d\x8e\x70\xc0\xed\x5d\xd4\xd7\x4a\x4d\x22\xdb\x9e\x59\xbd\xdb\x23\x88\x3d\x1e\xc5\x6b\x7c\x85\x9b\x09\x38\x59\x56\x4a\x2e\x25\xe6\xe0\x0a\x59\x06\xa8\xe0\xa5\x52\xa0\x8c\x59\x73\xad\x0d\x85\x96\xd1\x04\x35\x06\x04\x3c\xb8\x1c\xb4\x61\x08\x5f\x0b\x9f\x15\xe8\x40\x7a\xce\xde\xb6\xd6\x9a\xa8\x8c\xde\x25\xe4\xcc\x02\x78\x8d\xda\x13\xd0\x89\x28\x23\x33\x2a\x07\x8e\xd5\xb6\x3f\x89\xf4\x6f\x23\x9f\x39\x2c\x85\x72\x61\x24\x46\xdb\x31\xce\x4e\x06\x83\x66\x02\xd2\xf4\xdd\xf3\xde\x53\x25\x31\x13\x7e\x10\x78\xe3\x03\x88\x9d\x4e\xe1\x74\x25\xa4\x9e\x84\x07\xe9\x42\x56\xe0\x91\x91\xc9\xd6\xe8\x1d\x2c\x90\xcd\x63\xcc\x97\x86\x13\x12\xd3\x38\x91\x99\x05\x8c\x15\x68\x79\xce\xb5\x40\x6a\x81\x75\x8e\x39\x2c\xb6\xcc\xc8\x10\x46\x63\x64\xb4\x4d\x40\x78\xb8\x60\xe2\x10\x70\xa7\xf4\x14\x9f\x9d\xbf\x82\x77\xc2\x85\xc4\xf0\xbe\x1d\xc1\x7c\xf2\xd9\xe7\xb3\xe3\x4f\xc6\x51\x24\x35\x62\x7b\x4e\x78\xf8\x10\x1e\x44\xc3\x5b\x63\x3a\xdc\x2c\xf5\xd2\x8c\x92\x0b\xaa\xcb\xdd\xfd\x74\x48\x2b\x0d\x1d\xc5\xbf\x00\x9a\x44\x21\x77\x6e\xd0\xdb\x1a\xe3\x6e\xfb\x26\x0f\xda\xf0\x96\xa2\x8d\xce\xec\x05\xdb\x21\x63\x6e\x07\xe1\xef\xb7\xfb\x80\x76\x37\xec\xa8\xa9\xe7\x00\x09\xe8\xb6\x83\xb5\x29\x3c\x37\x15\x2e\x6b\xc2\x9a\x11\x9a\x52\x9b\x9a\x1b\x74\x84\x93\xbc\x58\x23\x08\xd8\x14\xd4\x5a\x7b\xd3\x04\x69\x18\x04\xf9\xa1\x83\x95\x89\x28\x9c\x1b\x7a\xb5\x85\x1c\x2b\xd4\x39\x05\x3e\xb1\x13\x55\x15\x60\xef\x79\x84\xb5\x0e\x11\xae\x85\xaa\x91\x90\xbf\x80\xa2\x5e\xb5\x32\x79\x68\x9a\x94\x32\xb3\xc6\xa1\xbd\x96\x19\x26\xf4\x46\x92\x4c\x99\x3a\x6f\xa3\x3a\x4d\x82\xf4\x0b\x03\xe7\xc3\xb2\x93\x2f\x9c\xab\x4b\x84\x2f\xbe\x48\xbf\xf8\x2f\x42\xe4\x42\xa9\xc8\xd8\xf5\x5f\xe3\xe9\x77\x17\xcd\xab\x13\x16\xc1\x95\x44\x27\x35\x68\xae\xf3\x0c\xc1\x6d\xad\x19\x8f\x07\x33\x83\xb4\x30\x07\x79\x61\xcc\x1a\xa4\x66\x78\x8d\xdd\xe3\xed\xea\x4d\xcc\x12\x79\xf8\x78\x27\x4d\xf0\x08\xe3\xdc\x43\xe2\x0a\xea\xad\x12\x86\x7c\x69\x9a\x3e\xa9\x3d\xe9\x40\x90\x5f\xfa\x6d\xe8\x71\x82\x5c\xd2\x51\x80\x32\xdc\x64\x38\xe9\x6b\xbe\x34\x17\xe7\xca\xdc\x02\x39\x58\xa1\x6f\x7b\x34\x9d\x87\x06\x88\x0e\x76\x63\xe1\x05\xf2\x63\xf3\xd4\x02\x1a\x10\x94\x00\xe2\x4c\xb9\xd7\x87\x09\xad\x0d\x1f\x08\x99\x81\xcc\xef\xa5\x9a\x7f\x02\x02\x8e\xa1\x2b\x72\x86\xbf\x21\x29\x92\x63\x43\x5f\x1a\x87\x38\x26\xcf\x55\x40\xc4\x15\xd5\x46\xcd\x9e\x8a\x29\x8d\xc2\x83\x8f\xc5\xa4\x71\x0e\x1b\xe9\x0a\xca\xc1\x1b\xe1\x42\xe7\xc9\x6d\xef\xe9\x9b\x73\xf8\x46\x78\xdc\x88\x2d\x58\xcc\x50\x5e\x23\xbb\xa9\x99\xb1\xa7\x69\x4a\x02\x1c\x45\x80\xec\xc6\x9b\x02\xe8\x80\x37\xdc\xdf\x84\x2e\x9a\x1e\x68\xe3\x98\xc2\x5e\x92\x86\xdd\xf8\xb5\xb0\xa4\x32\x8f\x23\x82\x5a\x4d\x52\xbe\xa0\x57\xf3\xbc\x21\x0f\xe7\xe2\xfb\xa5\x0b\xd3\xd4\x28\x2a\xf8\x56\x5c\x8b\x8b\xcc\xca\xca\x43\x29\x95\x92\x0e\x33\xa3\x73\x77\x90\x19\x71\x78\xe9\x62\xdd\x7f\x2a\xa8\xe7\x4e\x57\xc8\xcb\xa3\xce\xb1\x6a\x23\xb6\xae\x29\xb2\xde\x40\x56\x5b\x4b\x1e\x8c\xee\x1b\x3a\x2e\x9a\x3b\x3f\x80\xd0\x7a\x4a\x5f\xdb\x5f\x40\xb8\x76\x30\xcb\x43\xad\xfe\x1e\x9a\x0b\x73\x92\x84\x15\x4e\x66\x41\xf1\x49\x58\x8b\xac\x92\x59\x23\x66\x40\x05\xb9\x81\x7e\x41\xe3\xe7\x21\x47\x71\x81\xe7\xbb\xe6\x01\x37\xf5\xb0\xb1\xb6\x70\xd0\x61\xbe\x57\x7d\x07\x07\xe0\xd8\xaf\xc3\x62\x7f\x1f\x88\xdd\x8b\xc2\x3e\x04\xc1\x76\xf0\xd7\xbd\xe0\xab\x9b\x3f\x7d\x04\xec\xfa\x2d\x98\xeb\x37\x02\xae\x03\x68\xeb\x7e\xa8\x15\x71\x16\xf4\x1e\x76\xf8\xa5\xe0\xf0\x9d\x85\xdf\xc8\xe2\x74\x66\x02\xca\xac\x62\xde\xe4\x5f\x1e\xe8\xad\xa5\x83\x8f\xeb\x75\x7f\xaf\x46\x77\x0f\xee\xef\x19\x42\xa8\xed\x46\x7a\x37\x81\x52\xd8\x75\x18\x92\xed\x16\x78\xca\x38\x84\xd1\xc0\x19\xa2\xce\x84\x6e\x1b\x10\x1e\xa8\xdc\xf8\xbb\x43\xa5\x58\x49\x4f\x95\x33\x3c\x2f\x0b\x0a\x8c\x03\x28\x6b\xbc\xd3\x24\xf5\x80\x1d\xa9\x73\xbb\xe3\x9a\x7b\x7a\xdd\xdf\xb7\xd1\x85\x43\xa0\x26\xc2\xd2\x26\x2a\xb9\xbd\x7c\x30\x9f\x43\x2f\xee\x7e\x45\x3b\x7a\xe0\xbd\xec\xb8\xbf\x39\x26\xe0\x31\x0f\x45\x6b\x17\x38\x84\x1f\x96\x30\x2b\x74\x98\x13\xb6\xe3\xc1\x0d\xc3\x4c\xa3\x57\x69\x8f\x9d\x0b\xec\x2a\xcc\x3c\xe6\x5f\xc1\x65\x21\x28\x15\x0a\x1d\x80\x2b\x57\x04\x69\xe2\xb8\x4e\xfa\x30\x6c\x84\x24\xb0\x49\xe0\x6d\x08\x51\xba\x9d\xb2\xf2\x54\x50\x5c\x65\xb4\xc3\x9e\x84\xd3\xaa\x52\x32\xdc\x30\x45\xf6\x8a\x34\x09\x25\x3f\xfe\xb4\x72\xe7\x19\xfd\x74\x3b\x6e\xd3\x00\xc5\xdd\xed\xdf\x02\x00\x00\xff\xff\xf4\x09\x79\xdd\x77\x1f\x00\x00")

func index_stdioJsBytes() ([]byte, error) {
	return bindataRead(
		_index_stdioJs,
		"index_stdio.js",
	)
}

func index_stdioJs() (*asset, error) {
	bytes, err := index_stdioJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index_stdio.js", size: 8055, mode: os.FileMode(436), modTime: time.Unix(1512596131, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _shimGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcc\xb1\x11\xc2\x30\x0c\x85\xe1\xde\x53\xbc\x05\x12\xf7\xcc\x40\xc1\x0a\xcf\x58\x08\x5f\x88\xe4\x93\x1d\xee\xd8\x9e\x22\x4d\xca\xff\x2f\xbe\x9c\xd5\x6f\x2a\x26\xc1\x29\x50\x5f\x4a\xb3\xca\x49\x2c\x7d\x53\x8c\x77\xdb\xb1\xa6\x94\x33\x1e\x7c\x6e\x54\x39\x57\x0f\xff\xb6\x2a\x03\x3c\xfb\xe5\x81\x38\xcc\x9a\x29\x18\xa5\xcd\x60\xfc\xf0\xa1\xe9\x41\x95\x01\x37\xdc\xb9\x97\xca\x35\xf5\x8b\x93\xfe\x01\x00\x00\xff\xff\xb4\x05\x8d\x5f\x7e\x00\x00\x00")

func shimGoBytes() ([]byte, error) {
	return bindataRead(
		_shimGo,
		"shim.go",
	)
}

func shimGo() (*asset, error) {
	bytes, err := shimGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shim.go", size: 126, mode: os.FileMode(436), modTime: time.Unix(1510187626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go":          bindataGo,
	"index_http_proxy.js": index_http_proxyJs,
	"index_stdio.js":      index_stdioJs,
	"shim.go":             shimGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go":          &bintree{bindataGo, map[string]*bintree{}},
	"index_http_proxy.js": &bintree{index_http_proxyJs, map[string]*bintree{}},
	"index_stdio.js":      &bintree{index_stdioJs, map[string]*bintree{}},
	"shim.go":             &bintree{shimGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
