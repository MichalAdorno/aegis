// Code generated by go-bindata.
// sources:
// bindata.go
// index_http_proxy.js
// index_stdio.js
// shim.go
// DO NOT EDIT!

package shim

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1480541620, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _index_http_proxyJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x5f\x6f\xe3\x44\x10\x7f\xb6\x3f\xc5\x60\xa1\xb3\xad\x06\xbb\x20\x78\x20\x51\x90\xee\x8e\x00\x87\xee\xda\x42\xc3\x89\x07\xa4\x76\x63\xaf\xe3\xed\x39\xbb\x66\x77\x7d\x69\xd4\xcb\x77\x67\x66\xd7\x4e\x9c\xb6\x08\xc4\x13\x95\xda\x66\x67\x7f\x33\xf3\x9b\xbf\x9b\xb0\x50\xd2\x58\x78\xf7\xf2\xf7\x9b\x1f\x5e\xbe\x79\x7b\x0d\x73\xf8\x7a\x16\x86\x1f\x99\x86\xa2\x16\x4d\x79\xd3\x6a\x55\x70\x63\x50\xae\xf9\x9f\x9d\xd0\x3c\x89\x4f\x2e\xe2\x74\x12\x06\x6b\xe5\x8e\x08\x92\x5d\xd3\xa0\xa0\x54\x92\xe3\x89\x8c\xab\x86\x67\x8d\x5a\x67\x2b\x21\xcb\xa4\x17\x90\x4e\xc5\x44\x43\x66\xcf\xc3\xa0\xb6\xb6\x1d\x3b\xa0\x73\x9c\x22\x8d\xa4\xea\x64\x61\x85\x92\x20\xf9\xf6\xa6\xf7\x92\xa4\xf0\x10\x86\x41\x9e\x43\x2b\x5a\x0e\xc6\x96\x42\xe6\xaa\xb3\x13\x58\x35\xe8\x03\x5a\x66\x8c\xad\xb5\xea\xd6\x35\x5d\x72\xad\xc7\x04\x4f\xc8\x67\xa6\x65\x5b\x99\xc4\x59\xce\xf8\x5a\x98\x1b\xd6\x7a\xbf\x03\x3e\x53\x78\x89\x06\x94\x8e\x27\x30\x70\x49\x50\x40\x14\x82\xe0\x60\xc5\x79\xc9\xb6\x5a\x58\x9e\x44\x83\x2f\xa7\xc7\xcb\x29\x44\x67\x3f\x5f\x5f\x5e\x20\x4a\x0b\xb9\x16\xd5\xce\x19\x38\x8b\xfe\x90\x11\xfa\x0a\x02\x51\x41\x72\x76\xe6\xd3\xf1\xdd\xb1\x12\xde\xc5\xc1\x07\xbf\x17\x36\xf9\x32\x9d\x01\xc6\x5d\x29\x5d\x70\x4a\xae\x65\x42\x72\x8d\x89\x33\x96\x69\x0b\xac\xb2\x78\xb2\x4a\xc1\x86\xc9\x1d\x38\x93\x68\x63\x8f\xbf\x27\xf9\x23\xaf\x54\x21\x47\x04\x0f\xfb\xa7\x31\xa3\xb7\x71\xc8\x85\x2a\xf9\xbf\x8a\x19\xf5\x38\x96\x40\xf3\x0d\xb3\x9d\xe6\xcd\x0e\xb6\xc2\xd6\x40\xfa\x94\x08\xfa\xff\xbf\x88\x1c\xa5\xb0\xa0\x02\x25\xd1\xc2\x73\x3e\xf0\xec\x69\xa6\x43\x66\xf6\x29\xe9\x85\xfc\xbe\x55\xda\x9a\xac\x66\xb2\x6c\xd0\xd9\x7c\xd4\x10\x1f\xb9\xc4\xf6\x23\x5a\xfc\xde\x1e\xda\x93\x35\x5b\xb6\x33\x80\xad\xd9\x76\x16\xc9\x41\xd1\x69\x8d\xc8\x01\x18\x1b\x20\x2e\xe3\x69\x21\x71\x46\xc7\xc3\xb8\x38\x8b\x33\x6f\x70\xa8\x90\x6b\xf9\x3e\xf5\x8f\x5a\xeb\xc1\x01\x83\xc8\x51\x8a\xa6\xe0\xa9\xf5\xc2\xde\x1c\x8a\xfb\x4f\x4e\xbe\x3f\xf4\x62\x18\xd0\xdc\x53\x98\xc8\xe6\xdb\x6f\xce\xcf\x31\x03\xa2\xf2\xe1\xa1\x0f\xb6\xe6\xef\x99\x16\x6c\xd5\x70\x03\x9f\xcd\xe7\xd0\xc9\x92\x57\x58\x87\x12\x5e\xbc\x80\xe7\x50\x59\xc3\x36\xab\x92\x5d\x91\xc5\xff\xa4\x40\xeb\xa4\xef\x3b\xcf\xea\x1f\x94\xa8\x64\x3e\x57\x6e\xa7\x8c\x56\x81\x8f\x4d\xb5\x54\x30\x5a\x3b\x68\x13\xa0\x56\xc6\x4a\xb6\xc1\xd6\x8c\x1b\x55\xb0\x86\xce\xf1\x84\x6e\xc8\xdd\xd4\xfd\xf5\x47\x66\xeb\x3e\x99\x19\x7d\x86\x4f\x9f\x20\xce\x3d\x74\xc3\x6d\xad\xca\xe1\x96\xfc\xbe\x73\x12\x87\xf9\x71\xb1\xf4\xa8\x9a\x33\x1c\x18\x73\x80\xf9\x23\x61\x1c\x13\x80\xf8\x35\xd5\x44\xda\x2f\x96\xbb\x96\xc7\xc8\x08\x97\x51\x23\x0a\x46\x84\xf3\x3b\xa3\xa4\xb7\x33\x02\xbe\xe5\x72\x6d\x6b\x84\xbe\xea\xaa\x8a\xeb\x6c\xb5\xb3\xdc\xcb\xfa\x92\xad\x54\xb9\x4b\x49\x09\xe7\x60\xdf\xf7\xd0\x68\x25\x63\xeb\xbf\x5f\x5c\x2c\xa7\x6e\x18\x1f\x5d\x39\x03\xe9\x73\x3a\x97\x57\xcb\x37\x97\x17\xd7\xcf\x6a\xf5\xe9\x75\x7a\x98\xce\x66\xc5\x8a\x0f\xe3\x41\xc1\x71\x6d\xf1\xde\xaf\x12\x00\xaa\x08\x8a\x5e\x21\x4d\x44\xc5\x31\xa9\x01\x8e\x39\x93\xca\xd6\x9c\x5e\xa0\x4e\x7e\x00\x55\x41\xc9\x2c\x83\x9a\x19\x58\x71\x2e\x51\xa5\x10\xc8\xaf\x9c\x80\x51\x80\x59\xe2\xb8\xf4\x85\x1b\xb0\x5b\x1c\x84\x5b\xb2\x31\x38\x72\xcb\x8c\xb4\x47\xcb\x0c\x12\x67\x37\x1d\x12\x3f\x30\x38\x9b\x7b\x87\x33\x97\xb1\xd4\x93\x39\x31\xf4\xf4\x25\xf0\xbd\x99\xe7\xe3\x24\xdc\xe2\x8c\x62\x5b\x6e\xfc\x46\xa1\x47\x0d\x97\xd4\x14\x3e\x7f\xe0\xd9\x06\xf7\x19\x76\xee\xfe\x76\xb4\x82\xd3\x13\x7f\x79\x8e\x91\xc3\xb6\x46\x63\x07\xdf\x7f\x13\xf9\x96\xc3\x5d\x87\x6f\x77\x8b\xb3\x6f\x29\x01\xb8\x68\xb0\xcd\x34\x7f\xca\x5b\x96\x27\xf1\xf7\xa1\x07\x27\x75\xfd\x69\xb9\xbc\x82\x5f\x17\xbf\xfc\xb6\xb8\x5e\xc2\xe2\xe2\xfb\xc8\x13\x3b\x01\xf5\xa9\x72\x3d\x85\x51\x53\xfd\xee\xb0\x72\x6e\x07\xb5\x4c\x1b\x7e\x40\xcc\x46\x10\x33\x40\x8e\x6b\xea\xce\x03\x00\xfc\x32\xa6\x2f\x0d\xc8\x09\xfa\x9f\x20\xc2\x01\xb7\x9d\x79\x8d\x6b\x18\x97\x55\xf4\xd5\xf9\x79\x34\x19\xdd\xf6\xc3\x83\x57\x23\x9d\x20\x1a\x0f\x10\xa9\x3d\x1e\xa0\xe8\x08\xde\x8f\xcc\xe5\x79\x44\x83\x82\x1a\xcf\xc4\x31\xf2\x3a\x06\x1d\x23\x79\x02\xdc\x1f\x0b\x4a\xef\x0f\xed\x83\xac\x6f\x82\x61\x3e\xf0\xa9\xe8\x87\x23\xcd\xb0\x36\xee\x79\x09\xf7\x7f\x05\x00\x00\xff\xff\x90\xbd\x5d\x5e\x8b\x09\x00\x00")

func index_http_proxyJsBytes() ([]byte, error) {
	return bindataRead(
		_index_http_proxyJs,
		"index_http_proxy.js",
	)
}

func index_http_proxyJs() (*asset, error) {
	bytes, err := index_http_proxyJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index_http_proxy.js", size: 2443, mode: os.FileMode(420), modTime: time.Unix(1479336513, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _index_stdioJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x56\xcd\x6e\xdb\x46\x10\xbe\xeb\x29\x06\x3a\x84\x14\xa4\x50\x09\xd0\x43\x61\xd7\x0d\x14\x38\x6e\x9c\x26\x75\x10\xa9\x40\x01\x27\x10\xd6\xe4\x50\x5c\x98\xda\x65\x77\x97\x92\xd5\x40\xa7\xf6\x7d\xf2\x0e\x79\x95\xbe\x48\x67\x76\x49\x4b\x54\x65\x24\x68\x2f\xad\x0e\x92\x76\x76\x7e\xbe\xf9\xdd\xe9\xa5\x5a\x59\x07\x6f\x26\xbf\xcc\x2f\x26\x97\xaf\xa7\x70\x06\xdf\x9c\xf6\x7a\x95\xd1\x29\x5a\x9b\xa0\x5a\x5d\x47\x6f\x27\xb3\x97\xd1\x07\xba\x39\x46\x1d\x42\x74\x12\xd1\x77\xe7\xee\xf5\xe4\xcd\xf3\xf3\xc9\x7c\x36\x99\xfe\x38\x7f\x77\x75\x35\xdb\xe3\x9b\xcf\x33\x69\x94\x58\xe2\x69\x6f\x3c\x06\xb6\xae\x4b\x4c\x4a\xbd\x88\x8f\x68\x1f\x10\x94\x95\x30\x90\x16\xb2\xcc\xe6\x0d\x03\x01\x31\xf8\x6b\x2d\x0d\xc6\x51\xe7\x22\x1a\x8c\x7a\x00\x0b\xed\xcf\xc4\xa5\xea\xb2\x64\x4a\xa6\x15\xd2\x71\xcf\x56\x72\x23\x55\x16\x37\x04\x2f\x95\x0b\x59\xb2\xe6\x27\x64\x91\x70\xcd\xae\xce\xaf\x4e\x60\x66\x36\xe0\x34\x88\x95\x96\x19\xb8\x42\xda\x67\x70\x09\xa9\x50\x91\x03\xb9\x14\x0b\x49\x6a\x53\x5d\x6d\xa4\x5a\x8c\x40\x69\x07\x4b\xbd\xf2\xff\x99\x15\x44\x55\x81\x5e\xa1\x01\x14\x69\x01\x4e\x2e\x11\x88\xba\x30\x28\x1c\xe4\xda\x40\x85\x86\x7e\x96\x42\xa5\x98\x78\x93\xad\x21\xba\x58\x4a\x6b\xa5\x56\x24\x60\x6b\xb4\x49\xe2\x19\xde\xa1\x28\xcb\x0d\x14\xc2\x21\xa3\x62\xcb\xc1\x52\x2e\x4b\xdc\xb3\x12\x0b\x95\xc1\x72\x05\x99\xcc\x18\xe9\x5a\x9b\xdb\x41\xd2\xeb\x44\x2a\xc1\x3b\x4c\xa7\x1b\x95\x52\x04\x2b\x10\xb8\x90\x76\xce\x78\xc7\x6e\x59\x8d\x77\xc7\x47\x8f\x28\xf2\x4b\x9d\xc1\xf0\xee\xe0\x2a\x1a\x9c\x82\x0f\xd4\x39\xde\xd4\x0b\xfe\xc3\x69\xca\x3b\xb9\xc9\x29\x21\x3e\xc9\xd2\xe1\x92\x6f\x72\x9b\x90\xf7\x19\xe5\x3f\x98\x4e\xc6\x0d\x03\x87\x23\x66\x05\xf2\xec\xc9\x29\xc8\xef\xbc\x40\x52\xa2\x5a\xb8\x82\xce\xc3\xe1\x00\x3e\x32\x1f\x7f\xf6\x2b\xa6\xdf\x0f\xf2\x5f\x4d\xbf\xb8\x7c\xfd\xe2\x04\xfa\x54\x86\xde\xc4\xb5\xfc\xb0\x63\x64\xfb\xd6\x09\xd7\x20\xe5\xbf\x1e\xe6\xdf\x39\x3b\x2a\x1f\x3f\xf0\x79\x00\x82\xb7\x70\xfc\x8a\xa8\xd0\xd2\x65\x0e\x81\x35\x91\xf6\x82\xd2\x1b\x0f\xf6\x42\x70\x28\x18\x31\x81\x8b\x20\xda\x29\xde\x1e\xd3\x74\x4e\x79\x49\x9d\x36\x9b\x2f\xab\xcb\x5a\xd6\x8e\x4e\x38\x86\xdb\xf3\x5b\xf9\x1b\x9e\x00\x37\xb8\x37\x76\xdd\x67\x42\xff\x81\xa0\x79\x09\xaa\xab\xae\x04\x13\x5a\x89\x6d\xaf\x17\xe7\xb5\x4a\x1d\x77\x81\xc2\xf5\xbc\xe9\xea\x98\x71\x03\x10\x47\x25\x2b\x24\xc9\x4c\xaa\xb1\xae\xdd\x08\x6e\x4a\x6a\x69\xa8\x84\xb5\xae\x30\x35\xdf\xa0\x31\x9d\x71\xd0\xed\x00\x5b\x89\xb5\x8a\xa3\x83\xb2\x1e\xc1\x47\xaf\x54\x9f\xc0\x75\xc4\x26\x88\xd2\xfe\xde\x4b\x7a\xd5\x1f\x60\xcb\x09\x03\x8f\xe6\xc1\xe6\x6a\xbb\xa7\xd3\x38\x3c\xf7\xfc\x10\xc9\xb4\x6f\xe0\x11\x68\xea\x79\x11\x7c\xa5\x31\xe2\x07\x80\x73\x98\x05\x4f\xbf\xe0\x41\xf2\xcf\xe1\xb3\x76\x3f\x41\x6a\x8b\x19\xcf\x14\x9e\x15\x23\x58\x17\x1b\x8f\x43\xe9\xf5\x33\xf8\xfc\xe9\xfd\x3c\xfe\xf3\xf7\x3f\x06\xf3\xf1\xe7\x4f\xbd\x5d\x40\x13\x4d\xb6\x49\x91\x36\xa4\xbb\x4d\x55\x4c\x84\x90\x21\x38\xb0\x97\xac\x0d\x35\x52\xdc\x6f\x9d\xf1\x92\x98\x51\x33\x0e\x5f\x4d\xaf\x7e\x22\x2e\x43\xa3\x53\xe6\x1b\xaf\x62\xd8\x7f\xaf\xfa\x3e\xbc\xa1\x80\x87\xc3\x30\x9f\xbf\xdf\x3d\x54\xad\x99\x9d\x21\xbc\x93\x2e\x7e\x1a\xbc\xa2\x89\x92\xf2\x70\x56\x4e\xd0\x94\x36\x34\x94\xa8\xc8\x8c\x03\x91\x3b\x3a\x39\xad\x81\x06\xef\x26\x4c\xfd\x5e\x53\xdb\xf4\xe9\x54\x5a\x30\xcf\x8f\x87\xc7\xc4\x47\x4e\xf9\x61\x08\xc8\xea\x7e\x04\x52\xaa\xe2\xaf\x0c\x01\x49\x52\xd8\x2b\x83\x4b\xe1\x6a\x83\x34\xdb\xd7\xd2\x15\x90\xfa\xc6\xe8\x0f\xf9\xf7\xbf\x16\x08\xa2\xc3\x0b\x4e\x5d\xdc\x7f\x11\xe0\xdf\x43\x6e\x10\x0f\x8e\x05\xca\xf7\xe9\xbf\xac\x18\xaf\x03\x3c\x31\x54\xcf\xff\xb3\x76\xf8\x99\xc9\x84\x13\xcd\x7e\x72\xda\x8d\x12\x8d\x32\x1f\x26\xe6\xe8\x54\x55\x51\xab\xdb\x16\xf6\x6e\x57\x61\xb8\x04\x0f\xdd\x1e\x1a\xf6\x39\x18\x38\x0b\x26\x76\xde\xb6\x76\x29\x89\xcf\xeb\x3c\x47\xd3\xe8\x0d\x68\xb7\x80\xa5\xc5\x0e\x73\x93\x83\x0e\x97\xff\xe6\x11\x56\x60\x7a\xeb\x9f\x6e\xd2\x57\xf2\x2e\x24\x6c\x2a\x25\xd1\xc9\xc3\xa7\x4f\x3a\x58\x9a\xb7\x9c\x17\x0a\x3e\x5e\xef\xd1\x1e\x3f\xa5\xcd\xf2\x8c\x04\x76\x30\x39\x44\x14\x88\xaa\x76\x04\xd6\x67\xb8\x12\xc6\x62\xd0\xe4\xf4\xd4\xa7\x3b\x8e\x7e\x9e\x5d\x3c\xfe\x36\x1a\x34\xb8\xe0\x30\xaa\xbb\x9a\xe5\x35\xb0\x51\xd8\x3a\xd1\x26\x64\x3b\xe0\x5c\xf5\xf0\xae\xd2\x86\x9e\xc8\x82\x56\xa7\x92\x92\x7c\xb6\x57\x9f\x2b\x54\xf4\xbc\x70\x39\xe0\x9d\xbb\x7f\x7e\x68\x8d\xe1\x81\xe9\x6f\x69\x86\xd2\x6e\xa7\x56\xfa\x16\x9b\x0d\x4c\x67\x59\x19\x66\x68\xc5\xe9\x21\x16\x2a\xdd\x46\x05\x50\xc4\xbc\xd8\x20\x68\xba\xa4\x16\xb2\x05\x2d\x24\xb0\x16\xb4\xcb\x19\xbd\xa4\x01\x8c\x0a\x26\x6f\x2f\xe1\x07\xda\xf5\xd6\x62\x43\x39\x4e\x51\xae\x78\x46\x93\x25\x5e\xb0\xa8\x24\x69\x2b\x64\x03\x96\x26\x07\xc7\x99\x6e\x0c\x46\xb4\x76\x02\x0b\x10\x34\x7e\x0a\x89\x2a\xd8\x76\xae\x93\xa6\xf4\x0a\x33\x63\x84\xbb\x5d\xbe\x30\x0c\x39\x54\xac\x87\xd5\x06\x61\xca\x45\xff\xb2\x65\x0f\x72\xa7\x8d\xf3\xf4\xd2\x2a\xde\x5d\x4b\x78\x25\x56\x62\x9a\x1a\x59\xd1\xf6\x2b\xcb\x52\x5a\x24\x37\x33\x7b\x54\x19\x6b\x78\x63\x9b\x02\x3c\x27\xd7\xe2\x41\xb2\x40\x4f\x8e\x43\x73\xb0\xee\x92\xf0\xdb\x36\xff\xbc\xe7\xd6\xc6\x70\x04\x9b\xf0\x91\x8b\x9c\xd5\xce\x5a\xcf\xf4\x84\x8f\xf7\x7b\xbd\xcf\xd5\x91\x11\x14\xea\xf9\x60\x6a\x84\xba\xeb\x7b\xc0\xfd\x93\x00\x7c\x14\x68\x8d\x2a\xa2\x36\xff\x7c\xdd\xb4\x23\xa6\xb7\xfd\x2b\x00\x00\xff\xff\xf4\x9d\x30\x1d\x3f\x0d\x00\x00")

func index_stdioJsBytes() ([]byte, error) {
	return bindataRead(
		_index_stdioJs,
		"index_stdio.js",
	)
}

func index_stdioJs() (*asset, error) {
	bytes, err := index_stdioJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index_stdio.js", size: 3391, mode: os.FileMode(420), modTime: time.Unix(1480540322, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _shimGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x8c\xc1\x0d\xc2\x30\x10\x04\xff\xae\x62\x1b\x48\xfc\xa7\x06\x1e\xb4\xb0\xc6\xe6\x38\x85\xdc\x59\x67\x07\x89\xee\x41\xca\x87\xe7\x8c\x34\x93\xb3\xf8\x45\x9a\xb5\xe0\x6c\x10\x5f\x8a\x5a\xe5\x24\x96\xbe\x09\xc6\x53\x77\xac\x29\xe5\x8c\x1b\xef\x1b\xa5\x9d\xaa\x87\xbf\xb5\xb6\x01\x9e\xfc\xf0\x40\x1c\x66\x6a\x02\x46\xd1\x19\x8c\x0f\x5e\x34\x39\x7e\xcd\x80\x1b\xae\xdc\x4b\xe5\x9a\xfa\xdf\x27\x7d\x03\x00\x00\xff\xff\xb4\x05\x8d\x5f\x7e\x00\x00\x00")

func shimGoBytes() ([]byte, error) {
	return bindataRead(
		_shimGo,
		"shim.go",
	)
}

func shimGo() (*asset, error) {
	bytes, err := shimGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shim.go", size: 126, mode: os.FileMode(420), modTime: time.Unix(1478287898, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"index_http_proxy.js": index_http_proxyJs,
	"index_stdio.js": index_stdioJs,
	"shim.go": shimGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"index_http_proxy.js": &bintree{index_http_proxyJs, map[string]*bintree{}},
	"index_stdio.js": &bintree{index_stdioJs, map[string]*bintree{}},
	"shim.go": &bintree{shimGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

