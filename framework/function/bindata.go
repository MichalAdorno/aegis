// Code generated by go-bindata.
// sources:
// example_aegis
// example_main
// DO NOT EDIT!

package function

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _example_aegis = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\x4f\x6f\xd4\x30\x10\xc5\xef\xf9\x14\x4f\xe5\x4a\x8b\xca\x9f\x8b\x6f\xa9\x04\x12\x12\x42\x1c\xb8\x70\xaa\x26\xf6\xcb\xae\x85\x63\x5b\x1e\xbb\xe9\x7e\x7b\xe4\x64\x77\x11\x20\x7a\xca\xc8\xef\xcd\x9b\xf9\x4d\x24\x67\x33\x00\x51\x16\x1a\x7c\x7c\x96\x25\x07\x62\xe4\xc1\x2b\xc6\x9c\x07\xe0\x27\x99\x1f\x9a\x0f\xee\x93\x0f\x54\x83\x5a\x1a\x07\x59\xb5\x77\x15\x1e\x7c\x8a\x06\x4d\x6f\x29\x5a\x6f\xef\x87\x20\xcb\xe4\xa4\x6b\x8e\x6a\x8b\xcf\x75\x33\x8c\x11\xfc\x23\x5b\xb6\xec\xb9\x45\xdb\x0d\x5f\xb7\xe9\xd2\x95\xc7\xb3\x6f\x00\x5e\x61\x84\xe3\x2c\x2d\x54\xf0\x99\xb6\x75\x2b\x4a\x0a\xc4\xea\x43\xc0\x44\xd8\x42\xa9\x74\x98\x53\xc1\x29\xb5\xd7\x98\x5a\xed\x05\xac\x44\x48\x58\xe5\xa4\x68\x4a\x08\x34\xd3\xfa\xd9\x5b\xa4\xc8\xbb\x2d\xbc\x07\x19\x48\x89\xa6\xd3\x78\x59\x8c\xb9\x7f\xfb\xee\xfd\x07\xd3\x85\x37\xfb\x32\x3b\xce\xe3\x65\xcf\x41\xb2\xff\xef\xb5\xbe\x7d\x7e\x89\x7a\x53\x3b\xd1\x4d\x2e\xc9\xdd\x40\xab\x1c\xfe\xe5\x90\x56\xd3\x22\xd5\x5b\x09\xe1\x74\x87\x1f\x67\x12\xc7\xd9\x47\xee\x3d\x8a\x23\x0b\x21\x8a\x95\x21\xf4\xef\x1e\xf5\x24\xc5\xcb\x14\xa8\x3b\xdd\xf7\x23\x95\x7f\x4b\x90\x42\x64\x51\xa5\x83\x8f\xa8\x47\x82\x4f\x8c\x15\x0b\x55\xbb\xb3\xa6\x7e\xbd\x82\x2f\x1b\xf7\xf5\xff\xec\x91\xfb\x78\xb3\xd5\x40\xc7\xb8\xd4\x97\x8b\xf4\xb7\xeb\xd3\x75\xea\x6f\x17\x30\xa7\x64\xf0\x20\xe5\x57\x00\x00\x00\xff\xff\xbc\x4c\xe7\x68\x77\x02\x00\x00")

func example_aegisBytes() ([]byte, error) {
	return bindataRead(
		_example_aegis,
		"example_aegis",
	)
}

func example_aegis() (*asset, error) {
	bytes, err := example_aegisBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "example_aegis", size: 631, mode: os.FileMode(436), modTime: time.Unix(1510187626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _example_main = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x93\x41\x6f\xd4\x3c\x10\x86\xcf\xeb\x5f\x31\x9f\x2f\x5f\x16\xa5\x49\x85\x7a\xaa\xd4\x03\xaa\x4a\x0b\x2a\xa5\x6a\x0b\x1c\x10\x42\xb3\xc9\x6c\x62\xd5\xf1\xa4\xf6\x98\xec\x6a\xb5\xff\x1d\x39\xd9\xb6\x4b\x05\x57\x38\x44\x63\xc9\x33\xe3\xf7\x7d\x66\xd2\x63\x75\x8f\x0d\x41\x87\xc6\x29\x65\xba\x9e\xbd\x40\xa6\x66\xba\x62\x27\xb4\x12\xad\x66\xda\x72\x93\x82\x23\x29\xa3\xb7\xe9\xd8\x18\x69\xe3\xa2\xa8\xb8\x2b\x71\x08\xe9\x3b\xb0\xd8\x2d\x6a\x3c\x68\xb8\x9c\x4e\xcf\xf5\x48\x8d\x09\xb0\x5f\x23\x1d\x1a\xf4\x2c\x5c\x8e\x77\xe5\xd2\x63\x47\x03\xfb\x7b\xad\xe6\x4a\x2d\xa3\xab\x46\x3d\xd9\x1c\x36\x6a\x56\x96\x70\x81\xae\xb6\x04\xe8\xe0\xcd\xf5\xbb\x73\x14\x1a\x70\x7d\xed\x79\xb5\xbe\xa1\x87\x48\x41\x80\x7e\x90\x13\x18\x8c\xb4\x80\xf0\xe9\xe6\x12\x3c\x3d\x50\x0c\x02\x3d\x4a\x0b\x37\x1c\x85\xbc\x9a\xf9\x31\xc2\xf1\x09\x8c\xcf\x16\x57\x34\x4c\x57\xd9\x12\xad\xbd\x6b\x3d\xc7\xa6\x9d\x3f\xe6\x15\xd3\xab\x99\x3e\x3f\xbb\xd3\x39\xe8\x52\xe7\xe0\x99\x25\x87\x96\xac\xe5\x0f\xa6\xae\x2d\x0d\xe8\xe9\xb9\xe2\xd2\x04\x21\x97\xcd\xd5\x56\xa9\xb2\x84\xbd\xae\xd0\x8e\xcd\x02\xa0\x5b\x4f\xa2\xa4\x45\x81\x8a\xa3\xad\xdd\xff\x02\x8b\x34\x01\xa9\x5a\xaa\x41\x18\xd0\xb1\xb4\xe4\x77\x45\x7e\x22\xb2\xd7\x2d\xab\x64\x05\x3b\xc0\xc5\xe9\x14\xf3\xe4\x19\x5e\x4d\xce\x7e\x8f\x29\xa5\x84\x3f\xa6\x84\x9e\x5d\xa0\x1c\x7a\xf4\xd8\x05\x88\xde\x16\x9f\xd1\x46\x0a\xe3\x14\x3c\x85\xe2\x56\x50\x62\x38\xe5\x9a\xe0\x04\x8e\x0e\x8f\x76\x36\x13\x14\x30\x61\x52\x6b\x5c\x03\xe7\x67\x77\x09\x17\x18\x07\xd2\x9a\x00\x15\x06\x9a\x3c\xa4\xd4\x7f\x20\xde\x56\x39\x7c\x4f\x73\xff\x65\x35\x8b\xb7\x9e\xbb\x9d\x80\x24\x6a\x3e\xb9\x7c\x7f\xfb\xf1\x2a\x7b\x7d\x78\x98\x43\x87\xfd\xd7\x20\xde\xb8\xe6\x9b\x71\x42\x7e\x89\x15\x6d\xb6\x1b\x3d\x6e\x9b\x3e\x4e\x9a\x73\x78\xfa\x51\x8e\xc1\x56\xdb\xc7\xd1\xbf\x58\x91\x84\x07\x21\x98\xae\xb7\x04\xb4\xc2\x31\xf2\x12\xba\xa7\x8c\x89\xcf\x8b\xb2\xbf\x8d\x6a\xc1\x6c\x47\x5e\xdc\x14\xd7\xde\x38\xb1\x2e\xd3\x17\x49\x13\x9c\x5a\x8e\xf5\x97\xb4\xa2\xff\xe9\x11\x94\x44\xef\x40\x7c\x24\xb5\xfd\x19\x00\x00\xff\xff\x55\xb7\xb5\x0c\x44\x04\x00\x00")

func example_mainBytes() ([]byte, error) {
	return bindataRead(
		_example_main,
		"example_main",
	)
}

func example_main() (*asset, error) {
	bytes, err := example_mainBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "example_main", size: 1092, mode: os.FileMode(436), modTime: time.Unix(1521306939, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"example_aegis": example_aegis,
	"example_main":  example_main,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"example_aegis": &bintree{example_aegis, map[string]*bintree{}},
	"example_main":  &bintree{example_main, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
